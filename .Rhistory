#Missingness BsmtQual
homes$BsmtQual[is.na(homes$BsmtQual)] <- "No"
#Recode BsmtQual
homes$BsmtQual<-as.integer(plyr::revalue(homes$BsmtQual, ordinal_scale))
#Missingness BsmtCond
homes$BsmtCond[is.na(homes$BsmtCond)] <- "No"
#Recode BsmtCond
homes$BsmtCond<-as.integer(plyr::revalue(homes$BsmtCond, ordinal_scale))
#Missingness BsmtFinType1
homes$BsmtFinType1[is.na(homes$BsmtFinType1)] <- "No"
#Recode BsmtFinType1
homes$BsmtFinType1<-as.integer(plyr::revalue(homes$BsmtFinType1, FinType_ordinal))
table(homes$BsmtFinType1)
#Checking if MasVnrType is ordinal
homes%>%
filter(!is.na(SalePrice))%>%
group_by(MasVnrType) %>%
summarise(median = median(SalePrice), counts=n())
#Missingness MasVnrType
homes$MasVnrType[is.na(homes$MasVnrType)] <- "None"
#Create ordinality vector
mas_ordinality <- c('None'=0, 'BrkCmn'=0, 'BrkFace'=1, 'Stone'=2)
#Recode MasVnrType
homes$MasVnrType<-as.integer(plyr::revalue(homes$MasVnrType, mas_ordinality))
table(homes$MasVnrType)
#Missingness MasVnrArea
homes$MasVnrArea[is.na(homes$MasVnrArea)] <- 0
#Missingness Electrical
homes%>%
group_by(Electrical)%>%
count()%>%
arrange(desc(n))%>%
select(Electrical)%>%
head(n=1)->replacement_Electrical
homes$Electrical[is.na(homes$Electrical)] <- replacement_Electrical
#Which variables have missingness in data
homes%>%
select_if(function (x) any(is.na(x)))%>%
summarise_each(funs(sum(is.na(.))))%>%
gather()%>%
arrange(desc(value))->missing_columns
missing_columns%>%
#Make table
kable(caption="Variables with missing values in descending order",
#Add column names
col.names = c("Variable","Number of NAs")) %>%
#Style table
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
#Which variables have missingness in data
homes%>%
select_if(function (x) any(is.na(x)))%>%
summarise_each(funs(sum(is.na(.))))%>%
gather()%>%
arrange(desc(value))->missing_columns
missing_columns%>%
#Make table
kable(caption="Variables with missing values in descending order",
#Add column names
col.names = c("Variable","Number of NAs")) %>%
#Style table
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
x <-
c("tidyverse",
"knitr",
"formatR",
"stringr",
"quantmode",
"skimr",
"lubridate",
"tidyr",
"formattable",
"grid",
"gridExtra",
"kableExtra",
"here",
"corrplot",
"rms",
"dummies")
lapply(x, require, character.only = TRUE)
opts_chunk$set(echo = FALSE,
warning = FALSE,
error = FALSE,
message = FALSE,
collapse= TRUE,
comment = NA,
tidy = TRUE)
#Clear Global Environment
rm(list = ls())
path <- "/Volumes/TOSHIBAEXT/RStudio/blog/content/post/house_prices/"
#Read `train.csv` as homes
homes <- read.csv(paste0(path,"train.csv"), stringsAsFactors = FALSE)
#Get a glimpse of homes
glimpse(homes)
#is.numeric returns TRUE if the variable is numeric.
#sapply iterates and returns a vector.
#Which gives the indices that were TRUE
num_var <- which(sapply(homes, is.numeric))
#Count how many variables are numeric
length_num_var <- length(num_var)
#Return a vector with character variables
car_var <- which(sapply(homes, is.character))
#Count how many variables are characters
length_car_var <- length(car_var)
#Which variables have missingness in data
homes%>%
select_if(function (x) any(is.na(x)))%>%
summarise_each(funs(sum(is.na(.))))%>%
gather()%>%
arrange(desc(value))->missing_columns
missing_columns%>%
#Make table
kable(caption="Variables with missing values in descending order",
#Add column names
col.names = c("Variable","Number of NAs")) %>%
#Style table
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
#Vector for ordinal values
ordinal_scale <- c("Ex"=5, "Gd"=4, "TA"=3, "Fa"=2, "Po"=1, "No"=0)
#Missingness PoolQC
homes$PoolQC[is.na(homes$PoolQC)] <- "No"
#Recode PoolQC
homes$PoolQC<-as.integer(plyr::revalue(homes$PoolQC, ordinal_scale))
#Missingness MiscFeature
homes$MiscFeature[is.na(homes$MiscFeature)] <- "No"
#Recode MiscFeature
homes$MiscFeature <- as.factor(homes$MiscFeature)
#Missingness Alley
homes$Alley[is.na(homes$Alley)] <- "No"
#Recode Alley
homes$Alley <- as.factor(homes$Alley)
#Missingness Fence
homes$Fence[is.na(homes$Fence)] <- "No"
#Checking if Fence is ordinal
homes%>%
filter(!is.na(SalePrice))%>%
group_by(Fence) %>%
summarise(median = median(SalePrice), counts=n())
#Fence is not ordinal
#Recode Fence
homes$Fence <- as.factor(homes$Fence)
#Missingness FireplaceQu
homes$FireplaceQu[is.na(homes$FireplaceQu)] <- "No"
#Checking if FireplaceQu is ordinal
homes%>%
filter(!is.na(SalePrice))%>%
group_by(FireplaceQu) %>%
summarise(median = median(SalePrice), counts=n())
#Recode FireplaceQu
homes$FireplaceQu<-as.integer(plyr::revalue(homes$FireplaceQu, ordinal_scale))
#LotFrontage is the linear feet of street connnected to property
#Missing values will be replaced by neighborhood average
for (i in 1:nrow(homes)){
if(is.na(homes$LotFrontage[i])){
homes$LotFrontage[i] <-
as.integer(median(homes$LotFrontage[homes$Neighborhood==homes$Neighborhood[i]], na.rm=TRUE))
}
}
#Missingness GarageType
homes$GarageType[is.na(homes$GarageType)] <- "No"
#Recode GarageType
homes$GarageType <- as.factor(homes$GarageType)
#Checking if GarageFinish is ordinal
homes%>%
filter(!is.na(SalePrice))%>%
group_by(GarageFinish) %>%
summarise(median = median(SalePrice), counts=n())
#It is ordinal
#Missingness GarageFinish
homes$GarageFinish[is.na(homes$GarageFinish)] <- "No"
#GarageFinish ordinal vector
Finish <- c('No'=0, 'Unf'=1, 'RFn'=2, 'Fin'=3)
#Recode GarageFinish
homes$GarageFinish<-as.integer(plyr::revalue(homes$GarageFinish, Finish))
table(homes$GarageFinish)
#Missingness GarageQual
homes$GarageQual[is.na(homes$GarageQual)] <- "No"
#Recode GarageQual
homes$GarageQual<-as.integer(plyr::revalue(homes$GarageQual, ordinal_scale))
#Missingness GarageCond
homes$GarageCond[is.na(homes$GarageCond)] <- "No"
#Recode GarageCond
homes$GarageCond<-as.integer(plyr::revalue(homes$GarageCond, ordinal_scale))
#Missingness GarageYrBlt will be substituted for YearBuilt
#For all rows in homes
for (i in 1:nrow(homes)){
#If observation i of column GarageYrBlt is NA
if(is.na(homes$GarageYrBlt[i])){
#Change observation for observation i of column YearBuilt
homes$GarageYrBlt[i] <- homes$YearBuilt[i]
}
}
#Checking if BsmtExposure is ordinal
homes%>%
filter(!is.na(SalePrice))%>%
group_by(BsmtExposure) %>%
summarise(median = median(SalePrice), counts=n())
#Missingness BsmtExposure
homes$BsmtExposure[is.na(homes$BsmtExposure)] <- "None"
#It is ordinal, create vector substitute vector
exposure_ordinal <- c("Gd"= 4,"Av"= 3,"Mn"=2,"No"=1, "None"=0)
#Recode BsmtExposure
homes$BsmtExposure<-as.integer(plyr::revalue(homes$BsmtExposure, exposure_ordinal))
table(homes$BsmtExposure)
#Checking if BsmtFinType2 is ordinal
homes%>%
filter(!is.na(SalePrice))%>%
group_by(BsmtFinType2) %>%
summarise(median = median(SalePrice), counts=n())
#Missingness BsmtFinType2
homes$BsmtFinType2[is.na(homes$BsmtFinType2)] <- "No"
#It is ordinal, create vector substitute vector
FinType_ordinal <- c('No'=0, 'Unf'=1, 'LwQ'=2, 'Rec'=3, 'BLQ'=4, 'ALQ'=5, 'GLQ'=6)
#Recode BsmtFinType2
homes$BsmtFinType2<-as.integer(plyr::revalue(homes$BsmtFinType2, FinType_ordinal))
table(homes$BsmtFinType2)
#Missingness BsmtQual
homes$BsmtQual[is.na(homes$BsmtQual)] <- "No"
#Recode BsmtQual
homes$BsmtQual<-as.integer(plyr::revalue(homes$BsmtQual, ordinal_scale))
#Missingness BsmtCond
homes$BsmtCond[is.na(homes$BsmtCond)] <- "No"
#Recode BsmtCond
homes$BsmtCond<-as.integer(plyr::revalue(homes$BsmtCond, ordinal_scale))
#Missingness BsmtFinType1
homes$BsmtFinType1[is.na(homes$BsmtFinType1)] <- "No"
#Recode BsmtFinType1
homes$BsmtFinType1<-as.integer(plyr::revalue(homes$BsmtFinType1, FinType_ordinal))
table(homes$BsmtFinType1)
#Checking if MasVnrType is ordinal
homes%>%
filter(!is.na(SalePrice))%>%
group_by(MasVnrType) %>%
summarise(median = median(SalePrice), counts=n())
#Missingness MasVnrType
homes$MasVnrType[is.na(homes$MasVnrType)] <- "None"
#Create ordinality vector
mas_ordinality <- c('None'=0, 'BrkCmn'=0, 'BrkFace'=1, 'Stone'=2)
#Recode MasVnrType
homes$MasVnrType<-as.integer(plyr::revalue(homes$MasVnrType, mas_ordinality))
table(homes$MasVnrType)
#Missingness MasVnrArea
homes$MasVnrArea[is.na(homes$MasVnrArea)] <- 0
#Missingness Electrical
homes%>%
group_by(Electrical)%>%
count()%>%
arrange(desc(n))%>%
select(Electrical)%>%
head(n=1)->replacement_Electrical
homes$Electrical[is.na(homes$Electrical)] <- replacement_Electrical
#Which variables have missingness in data
homes%>%
select_if(function (x) any(is.na(x)))%>%
summarise_each(funs(sum(is.na(.))))%>%
gather()%>%
arrange(desc(value))->missing_columns
missing_columns%>%
#Make table
kable(caption="Variables with missing values in descending order",
#Add column names
col.names = c("Variable","Number of NAs")) %>%
#Style table
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
homes%>%
select_if(function (x) any(is.na(x)))
homes<-homes%>%
#Mutate to create `YearsSinceBuilt`, `YearsSinceGarageBuilt`, and `YearsSinceRemod`
#It will be the difference of the present year - YearBuilt
mutate(YearsSinceBuilt = year(Sys.Date())-YearBuilt,
#Same for YearsSinceRemod
YearsSinceRemod = year(Sys.Date())-YearRemodAdd,
#Same for GarageYrBlt
YearsSinceGarageBuilt = year(Sys.Date())-GarageYrBlt)%>%
#Remove `YearsSinceBuilt`, `YearsSinceGarageBuilt`, and `YearsSinceRemod`
select(-YearBuilt,
-YearRemodAdd,
-GarageYrBlt,
-Id)
complete_cor <- homes_num%>%
#Compute correlation of complete observations
cor(use = "pairwise.complete.obs")
#is.numeric returns TRUE if the variable is numeric.
#sapply iterates and returns a vector.
#Which gives the indices that were TRUE
num_var <- which(sapply(homes, is.numeric))
#Count how many variables are numeric
length_num_var <- length(num_var)
#Return a vector with character variables
car_var <- which(sapply(homes, is.character))
#Count how many variables are characters
length_car_var <- length(car_var)
car_var
#Recode Electrical
homes$Electrical <- as.factor(homes$Electrical)
as.vector(replacement_Electrical)
unlist(replacement_Electrical)
x <-
c("tidyverse",
"knitr",
"formatR",
"stringr",
"quantmode",
"skimr",
"lubridate",
"tidyr",
"formattable",
"grid",
"gridExtra",
"kableExtra",
"here",
"corrplot",
"rms",
"dummies")
lapply(x, require, character.only = TRUE)
opts_chunk$set(echo = FALSE,
warning = FALSE,
error = FALSE,
message = FALSE,
collapse= TRUE,
comment = NA,
tidy = TRUE)
#Clear Global Environment
rm(list = ls())
path <- "/Volumes/TOSHIBAEXT/RStudio/blog/content/post/house_prices/"
#Read `train.csv` as homes
homes <- read.csv(paste0(path,"train.csv"), stringsAsFactors = FALSE)
#Get a glimpse of homes
glimpse(homes)
#is.numeric returns TRUE if the variable is numeric.
#sapply iterates and returns a vector.
#Which gives the indices that were TRUE
num_var <- which(sapply(homes, is.numeric))
#Count how many variables are numeric
length_num_var <- length(num_var)
#Return a vector with character variables
car_var <- which(sapply(homes, is.character))
#Count how many variables are characters
length_car_var <- length(car_var)
#Which variables have missingness in data
homes%>%
select_if(function (x) any(is.na(x)))%>%
summarise_each(funs(sum(is.na(.))))%>%
gather()%>%
arrange(desc(value))->missing_columns
missing_columns%>%
#Make table
kable(caption="Variables with missing values in descending order",
#Add column names
col.names = c("Variable","Number of NAs")) %>%
#Style table
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
#Vector for ordinal values
ordinal_scale <- c("Ex"=5, "Gd"=4, "TA"=3, "Fa"=2, "Po"=1, "No"=0)
#Missingness PoolQC
homes$PoolQC[is.na(homes$PoolQC)] <- "No"
#Recode PoolQC
homes$PoolQC<-as.integer(plyr::revalue(homes$PoolQC, ordinal_scale))
#Missingness MiscFeature
homes$MiscFeature[is.na(homes$MiscFeature)] <- "No"
#Recode MiscFeature
homes$MiscFeature <- as.factor(homes$MiscFeature)
#Missingness Alley
homes$Alley[is.na(homes$Alley)] <- "No"
#Recode Alley
homes$Alley <- as.factor(homes$Alley)
#Missingness Fence
homes$Fence[is.na(homes$Fence)] <- "No"
#Checking if Fence is ordinal
homes%>%
filter(!is.na(SalePrice))%>%
group_by(Fence) %>%
summarise(median = median(SalePrice), counts=n())
#Fence is not ordinal
#Recode Fence
homes$Fence <- as.factor(homes$Fence)
#Missingness FireplaceQu
homes$FireplaceQu[is.na(homes$FireplaceQu)] <- "No"
#Checking if FireplaceQu is ordinal
homes%>%
filter(!is.na(SalePrice))%>%
group_by(FireplaceQu) %>%
summarise(median = median(SalePrice), counts=n())
#Recode FireplaceQu
homes$FireplaceQu<-as.integer(plyr::revalue(homes$FireplaceQu, ordinal_scale))
#LotFrontage is the linear feet of street connnected to property
#Missing values will be replaced by neighborhood average
for (i in 1:nrow(homes)){
if(is.na(homes$LotFrontage[i])){
homes$LotFrontage[i] <-
as.integer(median(homes$LotFrontage[homes$Neighborhood==homes$Neighborhood[i]], na.rm=TRUE))
}
}
#Missingness GarageType
homes$GarageType[is.na(homes$GarageType)] <- "No"
#Recode GarageType
homes$GarageType <- as.factor(homes$GarageType)
#Checking if GarageFinish is ordinal
homes%>%
filter(!is.na(SalePrice))%>%
group_by(GarageFinish) %>%
summarise(median = median(SalePrice), counts=n())
#It is ordinal
#Missingness GarageFinish
homes$GarageFinish[is.na(homes$GarageFinish)] <- "No"
#GarageFinish ordinal vector
Finish <- c('No'=0, 'Unf'=1, 'RFn'=2, 'Fin'=3)
#Recode GarageFinish
homes$GarageFinish<-as.integer(plyr::revalue(homes$GarageFinish, Finish))
table(homes$GarageFinish)
#Missingness GarageQual
homes$GarageQual[is.na(homes$GarageQual)] <- "No"
#Recode GarageQual
homes$GarageQual<-as.integer(plyr::revalue(homes$GarageQual, ordinal_scale))
#Missingness GarageCond
homes$GarageCond[is.na(homes$GarageCond)] <- "No"
#Recode GarageCond
homes$GarageCond<-as.integer(plyr::revalue(homes$GarageCond, ordinal_scale))
#Missingness GarageYrBlt will be substituted for YearBuilt
#For all rows in homes
for (i in 1:nrow(homes)){
#If observation i of column GarageYrBlt is NA
if(is.na(homes$GarageYrBlt[i])){
#Change observation for observation i of column YearBuilt
homes$GarageYrBlt[i] <- homes$YearBuilt[i]
}
}
#Checking if BsmtExposure is ordinal
homes%>%
filter(!is.na(SalePrice))%>%
group_by(BsmtExposure) %>%
summarise(median = median(SalePrice), counts=n())
#Missingness BsmtExposure
homes$BsmtExposure[is.na(homes$BsmtExposure)] <- "None"
#It is ordinal, create vector substitute vector
exposure_ordinal <- c("Gd"= 4,"Av"= 3,"Mn"=2,"No"=1, "None"=0)
#Recode BsmtExposure
homes$BsmtExposure<-as.integer(plyr::revalue(homes$BsmtExposure, exposure_ordinal))
table(homes$BsmtExposure)
#Checking if BsmtFinType2 is ordinal
homes%>%
filter(!is.na(SalePrice))%>%
group_by(BsmtFinType2) %>%
summarise(median = median(SalePrice), counts=n())
#Missingness BsmtFinType2
homes$BsmtFinType2[is.na(homes$BsmtFinType2)] <- "No"
#It is ordinal, create vector substitute vector
FinType_ordinal <- c('No'=0, 'Unf'=1, 'LwQ'=2, 'Rec'=3, 'BLQ'=4, 'ALQ'=5, 'GLQ'=6)
#Recode BsmtFinType2
homes$BsmtFinType2<-as.integer(plyr::revalue(homes$BsmtFinType2, FinType_ordinal))
table(homes$BsmtFinType2)
#Missingness BsmtQual
homes$BsmtQual[is.na(homes$BsmtQual)] <- "No"
#Recode BsmtQual
homes$BsmtQual<-as.integer(plyr::revalue(homes$BsmtQual, ordinal_scale))
#Missingness BsmtCond
homes$BsmtCond[is.na(homes$BsmtCond)] <- "No"
#Recode BsmtCond
homes$BsmtCond<-as.integer(plyr::revalue(homes$BsmtCond, ordinal_scale))
#Missingness BsmtFinType1
homes$BsmtFinType1[is.na(homes$BsmtFinType1)] <- "No"
#Recode BsmtFinType1
homes$BsmtFinType1<-as.integer(plyr::revalue(homes$BsmtFinType1, FinType_ordinal))
table(homes$BsmtFinType1)
#Checking if MasVnrType is ordinal
homes%>%
filter(!is.na(SalePrice))%>%
group_by(MasVnrType) %>%
summarise(median = median(SalePrice), counts=n())
#Missingness MasVnrType
homes$MasVnrType[is.na(homes$MasVnrType)] <- "None"
#Create ordinality vector
mas_ordinality <- c('None'=0, 'BrkCmn'=0, 'BrkFace'=1, 'Stone'=2)
#Recode MasVnrType
homes$MasVnrType<-as.integer(plyr::revalue(homes$MasVnrType, mas_ordinality))
table(homes$MasVnrType)
#Missingness MasVnrArea
homes$MasVnrArea[is.na(homes$MasVnrArea)] <- 0
#Missingness Electrical
homes%>%
group_by(Electrical)%>%
count()%>%
arrange(desc(n))%>%
select(Electrical)%>%
head(n=1)->replacement_Electrical
homes$Electrical[is.na(homes$Electrical)] <- unlist(replacement_Electrical)
#Recode Electrical
homes$Electrical <- as.factor(homes$Electrical)
#Which variables have missingness in data
homes%>%
select_if(function (x) any(is.na(x)))%>%
summarise_each(funs(sum(is.na(.))))%>%
gather()%>%
arrange(desc(value))->missing_columns
missing_columns%>%
#Make table
kable(caption="Variables with missing values in descending order",
#Add column names
col.names = c("Variable","Number of NAs")) %>%
#Style table
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
missing_columns
#is.numeric returns TRUE if the variable is numeric.
#sapply iterates and returns a vector.
#Which gives the indices that were TRUE
num_var <- which(sapply(homes, is.numeric))
#Count how many variables are numeric
length_num_var <- length(num_var)
#Return a vector with character variables
car_var <- which(sapply(homes, is.character))
#Count how many variables are characters
length_car_var <- length(car_var)
car_var
