#Which variables have missingness in data
homes%>%
dplyr::select_if(function (x) any(is.na(x)))%>%
dplyr::summarise_all(funs(sum(is.na(.))))%>%
gather()%>%
arrange(desc(value))->missing_columns
missing_columns%>%
#Make table
kable(caption="Variables with missing values in descending order",
#Add column names
col.names = c("Variable","Number of NAs")) %>%
#Style table
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
# Chunk 5: missingness and recoding ordinal variables
#Vector for ordinal values
ordinal_scale <- c("Ex"=5, "Gd"=4, "TA"=3, "Fa"=2, "Po"=1, "No"=0)
#Missingness PoolQC
homes$PoolQC[is.na(homes$PoolQC)] <- "No"
#Recode PoolQC
homes$PoolQC<-as.integer(plyr::revalue(homes$PoolQC, ordinal_scale))
#Missingness MiscFeature
homes$MiscFeature[is.na(homes$MiscFeature)] <- "No"
#Recode MiscFeature
homes$MiscFeature <- as.factor(homes$MiscFeature)
#Missingness Alley
homes$Alley[is.na(homes$Alley)] <- "No"
#Recode Alley
homes$Alley <- as.factor(homes$Alley)
#Missingness Fence
homes$Fence[is.na(homes$Fence)] <- "No"
#Checking if Fence is ordinal
homes%>%
filter(!is.na(SalePrice))%>%
group_by(Fence) %>%
dplyr::summarise(median = median(SalePrice), counts=n())
#Fence is not ordinal
#Recode Fence
homes$Fence <- as.factor(homes$Fence)
#Missingness FireplaceQu
homes$FireplaceQu[is.na(homes$FireplaceQu)] <- "No"
#Checking if FireplaceQu is ordinal
homes%>%
filter(!is.na(SalePrice))%>%
group_by(FireplaceQu) %>%
dplyr::summarise(median = median(SalePrice), counts=n())
#Recode FireplaceQu
homes$FireplaceQu<-as.integer(plyr::revalue(homes$FireplaceQu, ordinal_scale))
#LotFrontage is the linear feet of street connnected to property
#Missing values will be replaced by neighborhood average
for (i in 1:nrow(homes)){
if(is.na(homes$LotFrontage[i])){
homes$LotFrontage[i] <-
as.integer(median(homes$LotFrontage[homes$Neighborhood==homes$Neighborhood[i]], na.rm=TRUE))
}
}
#Missingness GarageType
homes$GarageType[is.na(homes$GarageType)] <- "No"
#Recode GarageType
homes$GarageType <- as.factor(homes$GarageType)
#Checking if GarageFinish is ordinal
homes%>%
filter(!is.na(SalePrice))%>%
group_by(GarageFinish) %>%
dplyr::summarise(median = median(SalePrice), counts=n())
#It is ordinal
#Missingness GarageFinish
homes$GarageFinish[is.na(homes$GarageFinish)] <- "No"
#GarageFinish ordinal vector
Finish <- c('No'=0, 'Unf'=1, 'RFn'=2, 'Fin'=3)
#Recode GarageFinish
homes$GarageFinish<-as.integer(plyr::revalue(homes$GarageFinish, Finish))
table(homes$GarageFinish)
#Missingness GarageQual
homes$GarageQual[is.na(homes$GarageQual)] <- "No"
#Recode GarageQual
homes$GarageQual<-as.integer(plyr::revalue(homes$GarageQual, ordinal_scale))
#Missingness GarageCond
homes$GarageCond[is.na(homes$GarageCond)] <- "No"
#Recode GarageCond
homes$GarageCond<-as.integer(plyr::revalue(homes$GarageCond, ordinal_scale))
#Missingness GarageYrBlt will be substituted for YearBuilt
#For all rows in homes
for (i in 1:nrow(homes)){
#If observation i of column GarageYrBlt is NA
if(is.na(homes$GarageYrBlt[i])){
#Change observation for observation i of column YearBuilt
homes$GarageYrBlt[i] <- homes$YearBuilt[i]
}
}
#Checking if BsmtExposure is ordinal
homes%>%
filter(!is.na(SalePrice))%>%
group_by(BsmtExposure) %>%
dplyr::summarise(median = median(SalePrice), counts=n())
#Missingness BsmtExposure
homes$BsmtExposure[is.na(homes$BsmtExposure)] <- "None"
#It is ordinal, create vector substitute vector
exposure_ordinal <- c("Gd"= 4,"Av"= 3,"Mn"=2,"No"=1, "None"=0)
#Recode BsmtExposure
homes$BsmtExposure<-as.integer(plyr::revalue(homes$BsmtExposure, exposure_ordinal))
table(homes$BsmtExposure)
#Checking if BsmtFinType2 is ordinal
homes%>%
filter(!is.na(SalePrice))%>%
group_by(BsmtFinType2) %>%
dplyr::summarise(median = median(SalePrice), counts=n())
#Missingness BsmtFinType2
homes$BsmtFinType2[is.na(homes$BsmtFinType2)] <- "No"
#It is ordinal, create vector substitute vector
FinType_ordinal <- c('No'=0, 'Unf'=1, 'LwQ'=2, 'Rec'=3, 'BLQ'=4, 'ALQ'=5, 'GLQ'=6)
#Recode BsmtFinType2
homes$BsmtFinType2<-as.integer(plyr::revalue(homes$BsmtFinType2, FinType_ordinal))
table(homes$BsmtFinType2)
#Missingness BsmtQual
homes$BsmtQual[is.na(homes$BsmtQual)] <- "No"
#Recode BsmtQual
homes$BsmtQual<-as.integer(plyr::revalue(homes$BsmtQual, ordinal_scale))
#Missingness BsmtCond
homes$BsmtCond[is.na(homes$BsmtCond)] <- "No"
#Recode BsmtCond
homes$BsmtCond<-as.integer(plyr::revalue(homes$BsmtCond, ordinal_scale))
#Missingness BsmtFinType1
homes$BsmtFinType1[is.na(homes$BsmtFinType1)] <- "No"
#Recode BsmtFinType1
homes$BsmtFinType1<-as.integer(plyr::revalue(homes$BsmtFinType1, FinType_ordinal))
table(homes$BsmtFinType1)
#Checking if MasVnrType is ordinal
homes%>%
filter(!is.na(SalePrice))%>%
group_by(MasVnrType) %>%
dplyr::summarise(median = median(SalePrice), counts=n())
#Missingness MasVnrType
homes$MasVnrType[is.na(homes$MasVnrType)] <- "None"
#Create ordinality vector
mas_ordinality <- c('None'=0, 'BrkCmn'=0, 'BrkFace'=1, 'Stone'=2)
#Recode MasVnrType
homes$MasVnrType<-as.integer(plyr::revalue(homes$MasVnrType, mas_ordinality))
table(homes$MasVnrType)
#Missingness MasVnrArea
homes$MasVnrArea[is.na(homes$MasVnrArea)] <- 0
#Missingness Electrical
homes%>%
group_by(Electrical)%>%
dplyr::count()%>%
arrange(desc(n))%>%
dplyr::select(Electrical)%>%
head(n=1)->replacement_Electrical
homes$Electrical[is.na(homes$Electrical)] <- unlist(replacement_Electrical)
#Recode Electrical
homes$Electrical <- as.factor(homes$Electrical)
#Recode MSZoning
homes$MSZoning  <- as.factor(homes$MSZoning)
#Recode MSSubClass
homes$MSSubClass  <- as.factor(homes$MSSubClass)
#Recode Street
homes$Street  <- as.factor(homes$Street)
#Recode LotShape
homes$LotShape   <- as.factor(homes$LotShape)
#Recode LandContour
homes$LandContour   <- as.factor(homes$LandContour)
#Recode Utilities
homes$Utilities    <- as.factor(homes$Utilities)
#Looking at factors
table(homes$Utilities)
#When looking at levels, all observations except 1, fall into one level. Therefore this variable is not too helpful.
homes$Utilities <- NULL
#Recode LotConfig
homes$LotConfig     <- as.factor(homes$LotConfig)
#Recode LandSlope
homes$LandSlope     <- as.factor(homes$LandSlope)
#Recode Neighborhood
homes$Neighborhood     <- as.factor(homes$Neighborhood)
#Recode Condition1
homes$Condition1     <- as.factor(homes$Condition1)
#Recode Condition2
homes$Condition2     <- as.factor(homes$Condition2)
#Recode BldgType
homes$BldgType      <- as.factor(homes$BldgType)
#Recode HouseStyle
homes$HouseStyle       <- as.factor(homes$HouseStyle)
#Recode RoofStyle
homes$RoofStyle       <- as.factor(homes$RoofStyle)
#Recode RoofMatl
homes$RoofMatl      <- as.factor(homes$RoofMatl)
#Recode Exterior1st
homes$Exterior1st       <- as.factor(homes$Exterior1st)
#Recode Exterior2nd
homes$Exterior2nd       <- as.factor(homes$Exterior2nd)
#Recode ExterQual
homes$ExterQual<-as.integer(plyr::revalue(homes$ExterQual, ordinal_scale))
#Recode ExterCond
homes$ExterCond<-as.integer(plyr::revalue(homes$ExterCond, ordinal_scale))
#Recode Foundation
homes$Foundation      <- as.factor(homes$Foundation)
#Recode Heating
homes$Heating       <- as.factor(homes$Heating)
#Recode HeatingQC
homes$HeatingQC<-as.integer(plyr::revalue(homes$HeatingQC, ordinal_scale))
#Recode CentralAir
boolean <- c("Y"=1,"N"=0)
homes$CentralAir<-as.integer(plyr::revalue(homes$CentralAir, boolean))
table(homes$CentralAir)
#Recode KitchenQual
homes$KitchenQual<-as.integer(plyr::revalue(homes$KitchenQual, ordinal_scale))
#Recode Functional
homes$Functional      <- as.factor(homes$Functional)
#Recode PavedDrive
homes$PavedDrive       <- as.factor(homes$PavedDrive)
#Recode SaleType
homes$SaleType        <- as.factor(homes$SaleType)
#Recode SaleCondition
homes$SaleCondition     <- as.factor(homes$SaleCondition)
# Chunk 6: create time variables
homes<-homes%>%
#Mutate to create `YearsSinceBuilt`, `YearsSinceGarageBuilt`, and `YearsSinceRemod`
#It will be the difference of the present year - YearBuilt
mutate(YearsSinceBuilt = year(Sys.Date())-YearBuilt,
#Same for YearsSinceRemod
YearsSinceRemod = year(Sys.Date())-YearRemodAdd,
#Same for GarageYrBlt
YearsSinceGarageBuilt = year(Sys.Date())-GarageYrBlt)%>%
#Remove `YearsSinceBuilt`, `YearsSinceGarageBuilt`, and `YearsSinceRemod`
dplyr::select(-YearBuilt,
-YearRemodAdd,
-GarageYrBlt,
-Id)
# Chunk 7: covariance-example
cov(scale(homes$SalePrice), scale(homes$OverallQual))
# Chunk 8: single-regression-normalised-data
norm_fit <- lm(scale(SalePrice) ~ scale(KitchenQual), data = homes)
round(coefficients(norm_fit), digits = 2)
# Chunk 9: correlation_matrix
#Select numeric variables
homes_num <- homes%>%
select_if(is.numeric)
#Create tidy correlation matrix
cor_homes <- tidy(cor(homes_num))
#Arrange correlations with SalePrice in descending order
high_cor_names <- cor_homes%>%
arrange(desc(SalePrice))%>%
filter(abs(SalePrice)>0.5)%>%#Filter variables that have relationship >0.5
pull(.rownames)#Pull names of variables
#Filter entire correlation matrix for the variables
high_cor <- cor(homes_num)[high_cor_names,high_cor_names]
#Create correlation matrix
corrplot.mixed(high_cor, tl.col="black", tl.pos = "lt",cl.ratio=0.1,number.cex=.8, cl.cex = .6, tl.cex = 0.8)
# Chunk 10: create dummy variables
#Select factor variables
homes_factor <- homes %>%
dplyr::select_if(is.factor)
#Create dummy dataframe
homes_dummies <- dummy.data.frame(homes_factor)
#Keep levels that have more than 10 observations
homes_dummies <- homes_dummies%>%
select_if(colSums(.)>10)%>%
cbind(homes$SalePrice)
# summarise_each(funs(sum))%>%
# str(give.attr=FALSE)
#Bind numeric and dummy variables
all_homes <- homes%>%
select_if(is.numeric)%>%
cbind(homes_dummies)
# Chunk 11: select significant numeric variables
#select significant variables
high_cor_vars <- all_homes%>%
dplyr::select(GarageArea,
X1stFlrSF,
YearsSinceRemod,
YearsSinceGarageBuilt,
YearsSinceBuilt)
#Create name list of high_cor_vars
names_high_cor_vars <- names(high_cor_vars)
# Chunk 12: high-cor-geompoint
#For each variable that is highly correlated
for (var in names_high_cor_vars){
#ggplot with the dataframe with values
plot <- ggplot(high_cor_vars, aes_string(x=var, y=all_homes$SalePrice))+
#geom_point to see distribution
geom_jitter(alpha=0.1)+
#Add labels
labs(title=paste("Sales price vs.",var),
x=var,
y="Sales price")+
theme_minimal()+
#Add neat scales for price
scale_y_continuous(breaks= seq(0, 800000, by=100000),
labels = comma)
#Print the plot after each loop
print(plot)
}
# Chunk 13: high-cor-factors
#Save column names
cols <- c("OverallQual", "ExterQual", "KitchenQual", "BsmtQual", "FullBath", "GarageFinish", "TotRmsAbvGrd", "FireplaceQu")
#Convert OverallQual, FullBath and TotRmsAbvGrd to a factor
high_cor_vars[cols] <- lapply(all_homes[cols], factor)
# Chunk 14: plotting categorical variables
#Select significant numeric values
high_cor_vars_fact <- high_cor_vars%>%
dplyr::select(cols)
#Create name list of high_cor_vars
names_high_cor_vars_fact <- names(high_cor_vars_fact)
#For each variable that is highly correlated
for (var in names_high_cor_vars_fact){
#ggplot with the dataframe with values
plot <- ggplot(high_cor_vars_fact, aes_string(x=var, y=all_homes$SalePrice))+
#geom_point to see distribution
geom_boxplot(alpha=0.1)+
#Add labels
labs(title=paste("Sales price vs.",var),
x=var,
y="Sales price") + theme_minimal() +
#Add neat scales for price
scale_y_continuous(breaks= seq(0, 800000, by=100000),
labels = comma)
#Print the plot after each loop
print(plot)
}
str(all_homes)
homes%>%
select_if(is.character)
homes%>%
+     select_if(is.factor)
homes%>%
select_if(is.numeric)%>%count()
homes%>%select_if(is.numeric)%>%length()
homes%>%select_if(is.factor)%>%length()
homes%>%select_if(is.character%>%length()
homes%>%select_if(is.character())%>%length()
homes%>%select_if(is.character)%>%length()
# Randomly assign rows to ids (1/2/3 represents train/valid/test)
# This will generate a vector of ids of length equal to the number of rows
# The train/valid/test split will be approximately 70% / 15% / 15%
set.seed(1)
assignment <- sample(1:3, size = nrow(homes),
prob = c(0.7,0.15,0.15),
replace = TRUE)
# Create a train, validation and tests from the original data frame
homes_train <- homes[assignment == 1, ]    # subset the homes data frame to training indices only
homes_valid <- homes[assignment == 2, ]  # subset the homes data frame to validation indices only
homes_test <- homes[assignment == 3, ]   # subset the homes data frame to test indices only
library(rpart)
names(homes)
# Train the model
homes_model <- rpart(formula = SalePrice ~ .,
data = homes_train,
method = "anova")
# Look at the model output
print(homes_model)
# Plot the tree model
rpart.plot(x = homes_model  , yesno = 2, type = 0, extra = 0)
library(rpart.plot)
# Train the model
homes_model <- rpart(formula = SalePrice ~ .,
data = homes_train,
method = "anova")
# Look at the model output
print(homes_model)
# Plot the tree model
rpart.plot(x = homes_model  , yesno = 2, type = 0, extra = 0)
homes_model$variable.importance
tidy(homes_model$variable.importance)
?rpart
summary.rpart(homes_model)
summary(homes_model)
tidy(homes_model$variable.importance)%>%
kable()
tidy(homes_model$variable.importance)%>%glimpse()
summary(homes_model)
summary(homes_model)[1]
str(summary(homes_model))
glimpse(summary(homes_model))
#Look at variable importance
tidy(homes_model$variable.importance)%>%
kable(caption="Variable importance",
#Add column names
col.names = c("Variable","Value")) %>%
#Style table
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
#Look at variable importance
tidy(homes_model$variable.importance)%>%
mutate_all(funs(scale))
kable(caption="Variable importance",
#Add column names
col.names = c("Variable","Value")) %>%
#Style table
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
tidy(homes_model$variable.importance)%>%
mutate_at(.vars/100)
tidy(homes_model$variable.importance)%>%
mutate_at(.funs = funs(./100))
tidy(homes_model$variable.importance)%>%
mutate_at(.funs = funs(.vars/100))
tidy(homes_model$variable.importance)%>%
mutate_at(funs(./100))
tidy(homes_model$variable.importance)%>%
mutate_at(funs(.vars/100))
tidy(homes_model$variable.importance)%>%
mutate_at(funs(vars/100))
tidy(homes_model$variable.importance)%>%
mutate_at(funs(vars(./100)))
tidy(homes_model$variable.importance)%>%
mutate_all(funs(scaled = . / 100))
tidy(homes_model$variable.importance)%>%
mutate_at(.vars = x, .funs = ./100)
tidy(homes_model$variable.importance)%>%
tidy(homes_model$variable.importance)
str(tidy(homes_model$variable.importance))
tidy(homes_model$variable.importance)%>%
mutate(x=x/100)
tidy(homes_model$variable.importance)%>%
mutate(x=x/100000000)
var_importance <- tidy(homes_model$variable.importance)
sum(var_importance$x)
var_importance%>%
mutate(x=x/total_importance)
total_importance <- sum(var_importance$x)
var_importance%>%
mutate(x=x/total_importance)
#Look at variable importance
var_importance <- tidy(homes_model$variable.importance)
total_importance <- sum(var_importance$x)
var_importance%>%
mutate(x=x/total_importance*100)
kable(caption="Variable importance",
#Add column names
col.names = c("Variable","Percentage")) %>%
#Style table
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
#Look at variable importance
var_importance <- tidy(homes_model$variable.importance)
total_importance <- sum(var_importance$x)
var_importance%>%
mutate(x=x/total_importance*100)%>%
kable(caption="Variable importance",
#Add column names
col.names = c("Variable","Percentage")) %>%
#Style table
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
length(homes_train)
length(var_importance)
nrow(var_importance)
sum(var_importance$x)
var_importance%>%
mutate(x=x/total_importance*100)->test
sum(test$x)
blogdown::serve_site()
# Randomly assign rows to ids (1/2/3 represents train/valid/test)
# This will generate a vector of ids of length equal to the number of rows
# The train/valid/test split will be approximately 70% / 15% / 15%
set.seed(1)
assignment <- sample(1:3, size = nrow(homes),
prob = c(0.7,0.15,0.15),
replace = TRUE)
# Create a train, validation and tests from the original data frame
homes_train <- homes[assignment == 1, ]    # subset the homes data frame to training indices only
homes_valid <- homes[assignment == 2, ]  # subset the homes data frame to validation indices only
homes_test <- homes[assignment == 3, ]   # subset the homes data frame to test indices only
knitr::opts_chunk$set(echo = TRUE)
library(datasets)
seatbelts.df <- as_tibble(Seatbelts)
fit <- lm(log(DriversKilled)~kms+PetrolPrice,data=seatbelts.df)
summary(fit)
predict(fit,newdata=data.frame(kms=mean(seatbelts.df$kms),PetrolPrice=mean(seatbelts.df$PetrolPrice)))
seatbelts.df.standard <- seatbelts.df%>%
mutate(pp=scale(PetrolPrice),
mm=kms/1000,
mmc=mm-mean(mm))
fit <- lm(DriversKilled~pp+mmc,data=seatbelts.df.standard)
dk <- seatbelts.df$drivers
dk <- seatbelts.df$DriversKilled
summary(dk)
dk <- seatbelts.df$DriversKilled
kms <- seatbelts.df$kms
edk <- residual(lm(dk~ kms))
edk <- resid(lm(dk~ kms))
edk
edk <- resid(lm(dk~ kms))
epp <- resid(lm(pp~kms))
reg_origin <- lm(dk~(edk-mean(edk))+(pp-mean(pp)))
reg_origin <- lm(dk~(edk-mean(edk))+(epp-mean(epp)))
epp <- resid(lm(pp~kms))
dk <- seatbelts.df$DriversKilled
kms <- seatbelts.df$kms
pp <- seatbelts.df$PetrolPrice
fitfull <- lm(dk~ kms+pp)
edk <- resid(lm(dk~ kms))
epp <- resid(lm(pp~kms))
reg_origin <- lm(dk~(edk-mean(edk))+(epp-mean(epp)))
dk <- seatbelts.df$DriversKilled
kms <- seatbelts.df$kms
pp <- seatbelts.df$PetrolPrice
fitfull <- lm(dk~ kms+pp)
edk <- resid(lm(dk~ kms))
epp <- resid(lm(pp~kms))
summary(lm(edk~epp-1))
summary(lm(edk~epp-1))$coef
summary(fitfull)$coef
edkpp <- resid(lm(dk~pp))
edkms <- resid(lm(kms~pp))
summary(lm(edkpp~edkms-1))$coef
summary(fitfull)$coef
require(datasets); data(swiss)
?swiss
glimpse(swiss)
require(datasets); data(swiss)
require(GGally); require(tidyverse)
g <- ggpairs(swiss, lower=list(continuous="smooth"),
params = c(method="loess"))
args(ggpairs)
g <- ggpairs(swiss, lower=list(continuous="smooth"))
g
rm(list = ls())
