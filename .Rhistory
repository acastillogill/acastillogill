#Store predicted values
validate_predicted=map2(model, validate,~predict(.x,.y)))
# Chunk 40: calculate-MAE-europe
cv_eval_lm_europe <- cv_prep_lm_europe%>%
#Compute MAE
mutate(validate_mae=map2_dbl(validate_actual,validate_predicted, ~mae(actual=.x,predicted = .y)))
# Chunk 41: creating-train-test-data-americas
full_americas <- full_hdi%>%
filter(region=="Americas")
#Setting seed
downloads_split_americas <- initial_split(full_americas,prop=0.75)
#Store training_data
training_data_americas <-training(downloads_split_americas)
#Store testing_data
testing_data_americas <- testing(downloads_split_americas)
#Split the data into 3 folds
cv_split_americas <- vfold_cv(training_data_americas, v=3)
# Chunk 42: creating-train-and-validate-data-from-each-fold-americas
cv_data_americas <- cv_split_americas%>%
#Create cross-validated data
mutate(train=map(splits, ~training(.x)),
validate=map(splits, ~testing(.x)))
# Chunk 43: creating-models-with-cross-validated-data-americas
cv_models_lm_americas <- cv_data_americas %>%
#Create models
mutate(model=map(train,~lm(formula=n ~ users, data = .x)))
# Chunk 44: extract-actual-and-predicted-values-americas
cv_prep_lm_americas <- cv_models_lm_americas %>%
#Create actual values
mutate(validate_actual=map(validate, ~ .x$n),
#Store predicted values
validate_predicted=map2(model, validate,~predict(.x,.y)))
# Chunk 45: calculate-MAE-americas
cv_eval_lm_americas <- cv_prep_lm_americas%>%
#Compute MAE
mutate(validate_mae=map2_dbl(validate_actual,validate_predicted, ~mae(actual=.x,predicted = .y)))
# Chunk 46: creating-train-test-data-asia
full_asia <- full_hdi%>%
filter(region=="Asia")
#Setting seed
downloads_split_asia <- initial_split(full_asia,prop=0.75)
#Store training_data
training_data_asia <-training(downloads_split_asia)
#Store testing_data
testing_data_asia <- testing(downloads_split_asia)
#Split the data into 3 folds
cv_split_asia <- vfold_cv(training_data_asia, v=3)
# Chunk 47: creating-train-and-validate-data-from-each-fold-asia
cv_data_asia <- cv_split_asia%>%
#Create cross-validated data
mutate(train=map(splits, ~training(.x)),
validate=map(splits, ~testing(.x)))
# Chunk 48: creating-models-with-cross-validated-data-asia
cv_models_lm_asia <- cv_data_asia %>%
#Create models
mutate(model=map(train,~lm(formula=n ~ users, data = .x)))
# Chunk 49: extract-actual-and-predicted-values-asia
cv_prep_lm_asia <- cv_models_lm_asia %>%
#Create actual values
mutate(validate_actual=map(validate, ~ .x$n),
#Store predicted values
validate_predicted=map2(model, validate,~predict(.x,.y)))
# Chunk 50: calculate-MAE-asia
cv_eval_lm_asia <- cv_prep_lm_asia%>%
#Compute MAE
mutate(validate_mae=map2_dbl(validate_actual,validate_predicted, ~mae(actual=.x,predicted = .y)))
# Chunk 51: testing-the-final-model-europe
#Store the best model with traning data
best_model_europe <- lm(n~users, data=training_data_europe)
#Store test data
test_actual_europe <- testing_data_europe$n
#Use the best model on the the test data
test_predict_europe <-predict(best_model_europe,testing_data_europe)
#Compute mae
mae(test_actual_europe,test_predict_europe)
# Chunk 52: testing-the-final-model-americas
#Store the best model with traning data
best_model_americas <- lm(n~users, data=training_data_americas)
#Store test data
test_actual_americas <- testing_data_americas$n
#Use the best model on the the test data
test_predict_americas <-predict(best_model_americas,testing_data_americas)
#Compute mae
mae(test_actual_americas,test_predict_americas)
# Chunk 53: testing-the-final-model-asia
#Store the best model with traning data
best_model_asia <- lm(n~users, data=training_data_asia)
#Store test data
test_actual_asia <- testing_data_asia$n
#Use the best model on the the test data
test_predict_asia <-predict(best_model_asia,testing_data_asia)
#Compute mae
mae(test_actual_asia,test_predict_asia)
# Chunk 54: create-tibble-with-pop-and-users-only
full_maps <- downloads_per_country%>%
left_join(pop, by=c("name"="name"))%>%
select(country, n, name, iso_3, region, sub_region, pop_2018)%>%
mutate(n_capita=n/pop_2018)%>%
filter(!is.na(n_capita),
pop_2018!=0)
# Chunk 55: see-summary
#view(dfSummary(world_full))
# Chunk 56: read-map-as-sf-object
map_path <- here::here("static","data","world_shapefile","world_shapefile.shp")
world <- sf::st_read(map_path)
# Chunk 57: merge-full-maps-and-map-path
world_full <- world%>%
left_join(full_maps, by=c("ISO3"="iso_3"))
#world_full <- na.omit(world_full)
# Chunk 58: plot-n-downloads-per-capita
#Create intervals for n_capita
#n_capita_breaks <- classIntervals(world_full$n_capita,
#n=5,
#style="pretty")
ggplot(world_full)+
geom_sf(aes(fill=n_capita), color="black") +
scale_fill_viridis_c(option = "plasma")+
theme(panel.grid.major = element_line(color = gray(.5),
linetype = "dashed", size = 0.5),
panel.background = element_rect(fill = "aliceblue"))
# Chunk 59: first-leaflet-map-attempt
#Remove names from geometry
names(st_geometry(world_full)) <-  NULL
#Create leaflet map
world_leaflet <- leaflet(world_full)%>%addPolygons()
world_leaflet
tmap_mode("view")
library(tmap)
tmap_mode("view")
world_full
tmap_mode("view")
tm_shape(world_full)+
tm_polygons()
tmap_mode("view")
tm_shape(world_full)+
tm_polygons()
tmap_mode("view")
tm_shape(world_full)+
tm_polygons()
tmap_mode("view")
tm_shape(world_full)+
tm_polygons()
tmap_mode("view")
tm_shape(world_full)+
tm_polygons()
tmap_mode("view")
tm_shape(world_full)+
tm_polygons()
tmap_mode("view")
tm_shape(world_full)+
tm_polygons()
tmap_mode("view")
tm_shape(world_full)+
tm_polygons()
tmap_mode("view")
tm_shape(world_full)+
tm_polygons()
tmap_mode("view")
tm_shape(world_full)+
tm_polygons()
tmap_mode("view")
tm_shape(world_full)+
tm_polygons()
tmap_mode("view")
tm_shape(world_full)+
tm_polygons()
tmap_mode("view")
tm_shape(world_full)+
tm_polygons()
tmap_mode("view")
tm_shape(world_full)+
tm_polygons()
tmap_mode("view")
tm_shape(world_full)+
tm_polygons()
tmap_mode("view")
tm_shape(world_full)+
tm_polygons()
tmap_mode("view")
tm_shape(world_full)+
tm_polygons()
tmap_mode("view")
tm_shape(world_full)+
tm_polygons()
tmap_mode("view")
tm_shape(world_full)+
tm_polygons()
tmap_mode("view")
tm_shape(world_full)+
tm_polygons()
tmap_mode("view")
tm_shape(world_full)+
tm_polygons()
tmap_mode("view")
tm_shape(world_full)+
tm_polygons(col="n_capita")
tmap_mode("view")
tm_shape(world_full)+
tm_polygons(col="n_capita")
library(tmaptools)
tmap_mode("view")
tm_shape(world_full)+
tm_polygons(col="n_capita")
tmap_mode("view")
tm_shape(world_full)+
tm_polygons(col="n_capita")
world_full_tmap <- tmaptools::read_shape(map_path)
class(world_full_tmap)
world_full_tmap <- tmaptools::read_shape(map_path)
tmap_mode("view")
tm_shape(world_full_tmap)+
tm_polygons(col="n_capita")
install.packages("tmap")
world_full_tmap <- tmaptools::read_shape(map_path)
tmap_mode("view")
tm_shape(world_full_tmap)+
tm_polygons(col="n_capita")
tmap_leaflet(world_full)
tm_shape(world_full)+
tmap_leaflet()
tm_shape(world_full)+
tmap_leaflet()
tm_shape(world_full)+
tmap_leaflet(world_full)
tm_shape(world_full)+
tmap_leaflet(col="n_capita")
tm_shape(world_full)+
tm_polygons(col="n_capita")
tm_shape(world_full)+
tm_bubbles(col="n_capita")
get_proj4(world_full)
CRS(world_full)
st_crs(world_full)
head(world_full)
tm_shape(world_full)+
tm_bubbles(col="n_capita")
devtools::install_version("tmap", version = "1.10")
tm_shape(world_full)+
tm_bubbles(col="n_capita")
tm_shape(world_full)+
tm_bubbles(col="n_capita")
tm_shape(world_full)+
tm_bubbles(col="n_capita")
tm_shape(world_full)+
tm_bubbles(col="n_capita")
tm_shape(world_full)+
tm_bubbles(col="n_capita")
tm_shape(world_full)+
tm_bubbles(col="n_capita")
tm_shape(world_full)+
tm_bubbles(col="n_capita")
tm_shape(world_full)+
tm_bubbles(col="n_capita")
tm_shape(world_full)+
tm_bubbles(col="n_capita")
library(tmap)
tm_shape(world_full)+
tm_bubbles(col="n_capita")
tm_shape(world_full)+
tm_bubbles(col="n_capita")
tm_shape(world_full)+
tm_bubbles(col="n_capita")
tm_shape(world_full)+
tm_bubbles(col="n_capita")
tm_shape(world_full)+
tm_bubbles(col="n_capita")
tm_shape(world_full)+
tm_bubbles(col="n_capita")
tm_shape(world_full)+
tm_bubbles(col="n_capita")
tm_shape(world_full)+
tm_bubbles(col="n_capita")
tm_shape(world_full)+
tm_bubbles(col="n_capita")
tm_shape(world_full)+
tm_bubbles(col="n_capita")
tm_shape(world_full)+
tm_bubbles(col="n_capita")
#Create intervals for n_capita
#n_capita_breaks <- classIntervals(world_full$n_capita,
#n=5,
#style="pretty")
ggplot(world_full)+
geom_sf(aes(fill=n_capita), color="black") +
scale_fill_viridis_c(option = "plasma")+
theme(panel.grid.major = element_line(color = gray(.5),
linetype = "dashed", size = 0.5),
panel.background = element_rect(fill = "aliceblue"))+
geom_text(data = distcenters, aes(x = clong, y = clat, label = id, size = 0.2))
#Create intervals for n_capita
#n_capita_breaks <- classIntervals(world_full$n_capita,
#n=5,
#style="pretty")
ggplot(world_full)+
geom_sf(aes(fill=n_capita), color="black") +
scale_fill_viridis_c(option = "plasma")+
theme(panel.grid.major = element_line(color = gray(.5),
linetype = "dashed", size = 0.5),
panel.background = element_rect(fill = "aliceblue"))+
geom_text(aes(x = clong, y = clat, label = id, size = 0.2))
names(world_full)
#Create intervals for n_capita
#n_capita_breaks <- classIntervals(world_full$n_capita,
#n=5,
#style="pretty")
ggplot(world_full)+
geom_sf(aes(fill=n_capita), color="black") +
scale_fill_viridis_c(option = "plasma")+
theme(panel.grid.major = element_line(color = gray(.5),
linetype = "dashed", size = 0.5),
panel.background = element_rect(fill = "aliceblue"))+
geom_text(aes(x ="LAT", y = "LON", label = NAME, size = 0.2))
#Create intervals for n_capita
#n_capita_breaks <- classIntervals(world_full$n_capita,
#n=5,
#style="pretty")
ggplot(world_full)+
geom_sf(aes(fill=n_capita), color="black") +
scale_fill_viridis_c(option = "plasma")+
theme(panel.grid.major = element_line(color = gray(.5),
linetype = "dashed", size = 0.5),
panel.background = element_rect(fill = "aliceblue"))+
geom_text(aes(x =LAT, y = LON, label = NAME, size = 0.2))
#Create intervals for n_capita
#n_capita_breaks <- classIntervals(world_full$n_capita,
#n=5,
#style="pretty")
ggplot(world_full)+
geom_sf(aes(fill=n_capita), color="black") +
scale_fill_viridis_c(option = "plasma")+
theme(panel.grid.major = element_line(color = gray(.5),
linetype = "dashed", size = 0.5),
panel.background = element_rect(fill = "aliceblue"))+
geom_text(aes(x =LAT, y = LON, label = NAME, size = 0.1))
#Create intervals for n_capita
#n_capita_breaks <- classIntervals(world_full$n_capita,
#n=5,
#style="pretty")
ggplot(world_full)+
geom_sf(aes(fill=n_capita), color="black") +
scale_fill_viridis_c(option = "plasma")+
theme(panel.grid.major = element_line(color = gray(.5),
linetype = "dashed", size = 0.5),
panel.background = element_rect(fill = "aliceblue"))
class(world_full)
tm_shape(World, projection="longlat") +
tm_polygons() +
tm_layout("Long lat coordinates (WGS84)", inner.margins=c(0,0,.1,0), title.size=.8)
tm_shape(world_full, projection="longlat") +
tm_polygons() +
tm_layout("Long lat coordinates (WGS84)", inner.margins=c(0,0,.1,0), title.size=.8)
tm_shape(world_full, projection="longlat") +
tm_polygons() +
tm_layout("Long lat coordinates (WGS84)", inner.margins=c(0,0,.1,0), title.size=.8)
tm_shape(world_full, projection="longlat") +
tm_polygons() +
tm_layout("Long lat coordinates (WGS84)", inner.margins=c(0,0,.1,0), title.size=.8)
tm_shape(world_full, projection="longlat") +
tm_polygons() +
tm_layout("Long lat coordinates (WGS84)", inner.margins=c(0,0,.1,0), title.size=.8)
tm_shape(world_full, projection="longlat") +
tm_polygons() +
tm_layout("Long lat coordinates (WGS84)", inner.margins=c(0,0,.1,0), title.size=.8)
tm_shape(world_full, projection="longlat") +
tm_polygons() +
tm_layout("Long lat coordinates (WGS84)", inner.margins=c(0,0,.1,0), title.size=.8)
tm_shape(world_full, projection="longlat") +
tm_polygons() +
tm_layout("Long lat coordinates (WGS84)", inner.margins=c(0,0,.1,0), title.size=.8)
install.packages("tmaptools")
install.packages("tmap")
library(tmap)
library(tmaptools)
tm_shape(world_full, projection="longlat") +
tm_polygons() +
tm_layout("Long lat coordinates (WGS84)", inner.margins=c(0,0,.1,0), title.size=.8)
tm_shape(world_full, projection="longlat") +
tm_polygons() +
tm_layout("Long lat coordinates (WGS84)", inner.margins=c(0,0,.1,0), title.size=.8, frame = FALSE)
tm_shape(world_full, projection="longlat") +
tm_polygons(col="n_capita") +
tm_layout("Long lat coordinates (WGS84)", inner.margins=c(0,0,.1,0), title.size=.8, frame = FALSE)
#n=5,
#style="pretty")
n_capita_breaks <- classIntervals(world_full$n_capita,
n=5,
style="pretty")
tm_shape(world_full, projection="longlat") +
tm_polygons(col="n_capita",breaks=n_capita_breaks ) +
tm_layout("Long lat coordinates (WGS84)", inner.margins=c(0,0,.1,0), title.size=.8, frame = FALSE)
n_capita_breaks <- classIntervals(world_full$n_capita,
n=5,
style="pretty")
tm_shape(world_full, projection="longlat") +
tm_polygons(col="n_capita",breaks=n_capita_breaks ) +
tm_layout("Long lat coordinates (WGS84)", inner.margins=c(0,0,.1,0), title.size=.8, frame = FALSE)
n_capita_breaks <- classIntervals(world_full$n_capita,
n=5,
style="pretty")
tm_shape(world_full, projection="longlat") +
tm_polygons(col="n_capita",breaks=n_capita_breaks ) +
tm_layout("Long lat coordinates (WGS84)", inner.margins=c(0,0,.1,0), title.size=.8, frame = FALSE)
library(classInt)
n_capita_breaks <- classIntervals(world_full$n_capita,
n=5,
style="pretty")
tm_shape(world_full, projection="longlat") +
tm_polygons(col="n_capita",breaks=n_capita_breaks ) +
tm_layout("Long lat coordinates (WGS84)", inner.margins=c(0,0,.1,0), title.size=.8, frame = FALSE)
n_capita_breaks <- classIntervals(world_full$n_capita,
n=5,
style="pretty")
tm_shape(world_full, projection="longlat") +
tm_polygons(col="n_capita",breaks="pretty") +
tm_layout("Long lat coordinates (WGS84)", inner.margins=c(0,0,.1,0), title.size=.8, frame = FALSE)
tm_shape(world_full, projection="longlat") +
tm_polygons(col="n_capita") +
tm_layout("Long lat coordinates (WGS84)", inner.margins=c(0,0,.1,0), title.size=.8, frame = FALSE)
tm_shape(world_full, projection="longlat") +
tm_polygons(col="n_capita", palette = "BuGn") +
tm_layout("Long lat coordinates (WGS84)", inner.margins=c(0,0,.1,0), title.size=.8, frame = FALSE)
tm_shape(world_full, projection="longlat") +
tm_polygons(col="n_capita", palette = "BuGn", n=5) +
tm_layout("Long lat coordinates (WGS84)", inner.margins=c(0,0,.1,0), title.size=.8, frame = FALSE)
tmap_mode("view")
tm_shape(world_full, projection="longlat") +
tm_polygons(col="n_capita", palette = "BuGn", n=5) +
tm_layout("Long lat coordinates (WGS84)", inner.margins=c(0,0,.1,0), title.size=.8, frame = FALSE)
tm_shape(world_full, projection="longlat") +
tm_polygons(col="n_capita",n=5, style="jenks") +
tm_layout("Long lat coordinates (WGS84)", inner.margins=c(0,0,.1,0), title.size=.8, frame = FALSE)
downloads_per_country
View(downloads_per_country)
View(r_downloads)
r_downloads%>%
group_by(country)%>%
summarise(n=n())%>%
filter(!is.na(n))%>%
arrange(desc(n))->downloads_per_country
r_downloads%>%
group_by(country)%>%
summarise(n=n())%>%
filter(!is.na(n))%>%
arrange(desc(n))->downloads_per_country
r_downloads%>%
group_by(country)%>%
summarise(n=n())%>%
filter(!is.na(n))%>%
arrange(desc(n))->downloads_per_country
r_downloads%>%
group_by(country)%>%
summarise(n=n())%>%
filter(!is.na(n))%>%
arrange(desc(n))->downloads_per_country
r_downloads%>%
group_by(country)%>%
summarise(n=n())%>%
filter(!is.na(n))%>%
arrange(desc(n))->downloads_per_country
tm_shape(world_full, projection="longlat") +
tm_polygons(col="n_capita",n=5, style="jenks") +
tm_layout("R Downloads per Capita in 2017/18", inner.margins=c(0,0,.1,0), title.size=.8, frame = FALSE)
blogdown::serve_site()
tm_shape(world_full, projection="longlat") +
tm_polygons(col="n_capita",n=5, style="jenks") +
tm_layout("R Downloads per Capita in 2017/18", inner.margins=c(0,0,.1,0), title.size=.8, frame = FALSE)+ tm_compass(type = "8star", position = c("left", "top")) +
tm_scale_bar(breaks = c(0, 100, 200), size = 1)+ tm_layout(bg.color = "lightblue")
tm_shape(world_full, projection="longlat") +
tm_polygons(col="n_capita",n=5, style="jenks") +
tm_layout("R Downloads per Capita in 2017/18", inner.margins=c(0,0,.1,0), title.size=.8, frame = FALSE)+ tm_compass(type = "8star", position = c("left", "top")) +
tm_scale_bar(breaks = c(0, 100, 200), size = 1)+ tm_layout(bg.color = "lightblue")
tm_shape(world_full, projection="longlat") +
tm_polygons(col="n_capita",n=5, style="jenks") +
tm_layout("R Downloads per Capita in 2017/18", inner.margins=c(0,0,.1,0), title.size=.8, frame = FALSE)+
tm_scale_bar(breaks = c(0, 100, 200), size = 1)+ tm_layout(bg.color = "lightblue")
tm_shape(world_full, projection="longlat") +
tm_polygons(col="n_capita",n=5, style="jenks") +
tm_layout("R Downloads per Capita in 2017/18", inner.margins=c(0,0,.1,0), title.size=.8, frame = FALSE)+
tm_scale_bar(breaks = c(0, 100, 200), size = 1) #tm_layout(bg.color = "lightblue")
blogdown::serve_site()
tm_shape(world_full, projection="longlat") +
tm_polygons(col="n",n=5, style="jenks") +
tm_layout("Total R Downloads in 2017/18", inner.margins=c(0,0,.1,0), title.size=.8, frame = FALSE)+
tm_scale_bar(breaks = c(0, 100, 200), size = 1) #tm_layout(bg.color = "lightblue")
plot_total_downloads <- tm_shape(world_full, projection="longlat")+
tm_polygons(col="n",n=5, style="jenks") +
tm_layout("Total R Downloads in 2017/18", inner.margins=c(0,0,.1,0), title.size=.8, frame = FALSE)+
tm_scale_bar(breaks = c(0, 100, 200), size = 1) #tm_layout(bg.color = "lightblue")
tmap_leaflet(plot_total_downloads)
plot_total_downloads
blogdown::serve_site()
plot_downloads_per_capita <- tm_shape(world_full) +
tm_polygons(col="n_capita",n=5, style="jenks") +
tm_layout("R Downloads per Capita in 2017/18", inner.margins=c(0,0,.1,0), title.size=.8, frame = FALSE)+
tm_scale_bar(breaks = c(0, 100, 200), size = 1)
tmap_leaflet(plot_downloads_per_capita)
plot_downloads_per_capita <- tm_shape(world_full) +
tm_polygons(col="n_capita",n=4, style="jenks") +
tm_layout("R Downloads per Capita in 2017/18", inner.margins=c(0,0,.1,0), title.size=.8, frame = FALSE)+
tm_scale_bar(breaks = c(0, 100, 200), size = 1)
tmap_leaflet(plot_downloads_per_capita)
plot_total_downloads <- tm_shape(world_full)+
tm_polygons(col="n",n=4, style="jenks") +
tm_layout("Total R Downloads in 2017/18", inner.margins=c(0,0,.1,0), title.size=.8, frame = FALSE)+
tm_scale_bar(breaks = c(0, 100, 200), size = 1)
tmap_leaflet(plot_total_downloads)
plot_total_downloads <- tm_shape(world_full)+
tm_polygons(col="n",n=4, style="jenks") +
tm_layout("Total R Downloads in 2017/18", title.size=.8, frame = FALSE)+
tm_scale_bar(breaks = c(0, 100, 200), size = 1)
tmap_leaflet(plot_total_downloads)
tmap_mode("plot")
