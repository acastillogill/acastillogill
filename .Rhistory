rownames_to_column()
colnames(shelf_cluster)[1] <- "Shelf"
shelf_cluster%>%
arrange(desc(Shelf))%>%
regulartable()%>%
theme_vanilla()
# Chunk 13: plot-sugar-shelf
ggplot(cereals_k2_complete, aes(x = sugars, y = shelf, color = Cluster)) +
geom_jitter(alpha=0)+
scale_color_manual(values=c("#1F78B4" , "#E31A1C"))+
geom_text_repel(aes(label=name), force=2, size=3, segment.alpha = 0)+
scale_y_continuous(breaks=c(1,2,3))+
labs(title="Which shelf has the most sugary cereals?",
x="Sugar content per serving",
y="Supermarket shelf: from the floor (1) to the top (3)")
blogdown::stop_server()
blogdown::serve_site()
install.packages("blogdown")
install.packages("hrbrthemes")
install.packages"ggrepel"
install.packages("ggrepel")
x <-
c(
"knitr",
"here",
"scales",
"magrittr",
"cowplot",
"tidyverse",
"Metrics",
"rsample",
"broom",
"sf",
"rgdal",
"summarytools",
"tmap",
"tmaptools",
"lubridate",
"RColorBrewer",
"hrbrthemes",
"ggrepel")
lapply(x, require, character.only = TRUE)
opts_chunk$set(echo = FALSE,
warning = FALSE,
error = FALSE,
message = FALSE,
collapse = TRUE,
comment = NA,
tidy = TRUE,
include = FALSE)
theme_set(theme_ipsum_rc())
job_search <- read_csv(file=here::here("static","data","job_search.csv"))
# Chunk 1: setup
x <-
c("dplyr",
"knitr",
"here",
"scales",
"magrittr",
"ggplot2",
"cowplot",
"tidyverse",
"Metrics",
"rsample",
"broom",
"sf",
"rgdal",
"summarytools",
"tmap",
"tmaptools",
"lubridate",
"RColorBrewer",
"hrbrthemes",
"ggrepel",
"dummies",
"stats",
"ggrepel",
"kableExtra",
"dendextend",
"cluster",
"tidylog",
"flextable")
lapply(x, require, character.only = TRUE)
opts_chunk$set(echo = FALSE,
warning = FALSE,
error = FALSE,
message = FALSE,
collapse = TRUE,
comment = NA,
tidy = TRUE,
include = FALSE,
fig.height=10,
fig.width=14)
theme_set(theme_ipsum_rc())
options(
digits=4,
scipen = 999
)
cereals <- read_csv(here::here("static","data","cereals.csv"))
# Chunk 2: scaling-data
#Remove categorical variables
num_cereals <- cereals[,4:16]
#Remove shelf
num_cereals$shelf <- NULL
#scale numeric variables
num_cereals <- scale(num_cereals)
#Calculate distances
dist_cereals <- dist(num_cereals, method = "euclidean")
# Chunk 3: hierarchical-clustering-complete
#Hierarchical clustering by complete linkage
hc_cereals_complete <- hclust(dist_cereals, method = "complete")
#Selecting two clusters
clusters_k2_complete <- cutree(hc_cereals_complete, k=2)
#Appending the clusters to all the dataset
cereals_k2_complete <- mutate(cereals, cluster=clusters_k2_complete)
complete_count <- count(cereals_k2_complete, cluster)
complete_count
# Chunk 4: hierarchical-clustering-single
#Hierarchical clustering by single linkage
hc_cereals_single <- hclust(dist_cereals, method = "single")
#Selecting two clusters
clusters_k2_single <- cutree(hc_cereals_single, k=2)
#Appending the clusters to all the dataset
cereals_k2_single <- mutate(cereals, cluster=clusters_k2_single)
single_count <- count(cereals_k2_single, cluster)
# Chunk 5: hierarchical-clustering-average
#Hierarchical clustering by average linkage
hc_cereals_average <- hclust(dist_cereals, method = "average")
#Selecting two clusters
clusters_k2_average <- cutree(hc_cereals_average, k=2)
#Appending the clusters to all the dataset
cereals_k2_average <- mutate(cereals, cluster=clusters_k2_average)
average_count <- count(cereals_k2_average, cluster)
# Chunk 6: plot-complete-linkage
dend_cereals_comp <- as.dendrogram(hc_cereals_complete)
dend_colored_comp <- color_branches(dend_cereals_comp, k=2)
plot(dend_colored_comp)
# Chunk 7: plot-average-linkage
dend_cereals_av <- as.dendrogram(hc_cereals_average)
dend_colored_av <- color_branches(dend_cereals_av, k=2)
plot(dend_colored_av)
# Chunk 8: plot-single-linkage
dend_cereals_sin <- as.dendrogram(hc_cereals_single)
dend_colored_sin <- color_branches(dend_cereals_sin, k=2)
plot(dend_colored_sin)
# Chunk 9: table-mean-for-each-cluster
two_clusters <- cereals_k2_complete %>%
select(-shelf,-name,-mfr,-type)%>%
group_by(cluster) %>%
summarise_all(funs(mean(.)))%>%
cbind(complete_count$n)
colnames(two_clusters)[14] <- "n"
regulartable(two_clusters)%>%
theme_vanilla()
# Chunk 10: renaming-clusters
cereals_k2_complete$cluster <- as.factor(cereals_k2_complete$cluster)
cereals_k2_complete$cluster <- plyr::revalue(cereals_k2_complete$cluster, c("1"="Healthy","2"="Unhealthy"))
colnames(cereals_k2_complete)[17] <- "Cluster"
# Chunk 11: plot-sodium-sugar
ggplot(cereals_k2_complete, aes(x = sugars, y = sodium, color = Cluster)) +
geom_point(alpha=0.5)+
scale_color_manual(values=c("#1F78B4" , "#E31A1C"))+
geom_text_repel(aes(label=name), force=2, size=3, segment.alpha = 0.5)+
labs(title="How do clusters stack up on sugar and sodium content?",
x="Sugar content per serving",
y="Sodium content per serving")
# Chunk 12: plot-sugar-shelf
ggplot(cereals_k2_complete, aes(x = sugars, y = shelf, color = Cluster)) +
geom_jitter(alpha=0)+
scale_color_manual(values=c("#1F78B4" , "#E31A1C"))+
geom_text_repel(aes(label=name), force=2, size=3, segment.alpha = 0)+
scale_y_continuous(breaks=c(1,2,3))+
labs(title="Which shelf has the most sugary cereals?",
x="Sugar content per serving",
y="Supermarket shelf: from the floor (1) to the top (3)")
# Chunk 13: table-counting-sugar-shelf
shelf_cluster <- as.data.frame.matrix(table(cereals_k2_complete$shelf,cereals_k2_complete$Cluster))
colnames(shelf_cluster) <- c("Healthy","Unhealthy")
shelf_cluster <- shelf_cluster%>%
mutate(Total=Healthy+Unhealthy)%>%
rownames_to_column()
colnames(shelf_cluster)[1] <- "Shelf"
shelf_cluster%>%
arrange(desc(Shelf))%>%
regulartable()%>%
theme_vanilla()
install.packages("flextable")
x <-
c("dplyr",
"knitr",
"here",
"scales",
"magrittr",
"ggplot2",
"cowplot",
"tidyverse",
"Metrics",
"rsample",
"broom",
"lubridate",
"RColorBrewer",
"hrbrthemes",
"ggrepel",
"dummies",
"stats",
"ggrepel",
"kableExtra",
"dendextend",
"cluster",
"tidylog",
"flextable")
lapply(x, require, character.only = TRUE)
opts_chunk$set(echo = FALSE,
warning = FALSE,
error = FALSE,
message = FALSE,
collapse = TRUE,
comment = NA,
tidy = TRUE,
include = FALSE,
fig.height=10,
fig.width=14)
theme_set(theme_ipsum_rc())
options(
digits=4,
scipen = 999
)
cereals <- read_csv(here::here("static","data","cereals.csv"))
install.packages("cowplot")
install.packages("dummies")
install.packages("kableExtra")
install.packages("dendextend")
install.packages("dendextend")
x <-
c("dplyr",
"knitr",
"here",
"scales",
"magrittr",
"ggplot2",
"cowplot",
"tidyverse",
"Metrics",
"rsample",
"broom",
"lubridate",
"RColorBrewer",
"hrbrthemes",
"ggrepel",
"dummies",
"stats",
"ggrepel",
"kableExtra",
"dendextend",
"cluster",
"tidylog",
"flextable")
lapply(x, require, character.only = TRUE)
opts_chunk$set(echo = FALSE,
warning = FALSE,
error = FALSE,
message = FALSE,
collapse = TRUE,
comment = NA,
tidy = TRUE,
include = FALSE,
fig.height=10,
fig.width=14)
theme_set(theme_ipsum_rc())
options(
digits=4,
scipen = 999
)
cereals <- read_csv(here::here("static","data","cereals.csv"))
devtools::install_github("elbersb/tidylog")
install.packages("devtools")
devtools::install_github("elbersb/tidylog")
devtools::install_github("elbersb/tidylog")
blogdown::serve_site()
blogdown::serve_site()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
grand_slams <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-04-09/grand_slams.csv")
ggplot(data = grand_slams,
mapping = aes(x = tournament_date, y = rolling_win_count)) +
geom_point()
ggplot(data = grand_slams,
mapping = aes(x = tournament_date, y = rolling_win_count))
ggplot(data = grand_slams,
mapping = aes(x = tournament_date, y = rolling_win_count)) +
geom_point()
ggplot(data = grand_slams,
mapping = aes(x = tournament_date, y = rolling_win_count)) +
geom_point() +
geom_hline(aes(yintercept = 10), colour = "red")
more_than_10_wins <- grand_slams %>%
group_by(name) %>%
filter(any(rolling_win_count > 10))
ggplot(data = more_than_10_wins,
mapping = aes(x = tournament_date, y = rolling_win_count)) +
geom_point(aes(colour = name))
ggplot(data = more_than_10_wins,
aes(x = name)) +
geom_bar()
ggplot(data = more_than_10_wins,
aes(x = name)) +
geom_bar(aes(fill = grand_slam))
more_than_10_wins <- more_than_10_wins %>%
group_by(name) %>%
mutate(first_win = min(tournament_date),
days_since_first = as.numeric(tournament_date - first_win))
ggplot(data = more_than_10_wins,
mapping = aes(x = days_since_first, y = rolling_win_count)) +
geom_line()
ggplot(data = more_than_10_wins,
mapping = aes(x = days_since_first, y = rolling_win_count)) +
geom_line(aes(group = name))
ggplot(data = more_than_10_wins,
mapping = aes(x = days_since_first, y = rolling_win_count)) +
geom_line(aes(colour = name)) +
facet_grid(rows = vars(gender))
ggplot(data = more_than_10_wins,
mapping = aes(x = days_since_first, y = rolling_win_count)) +
geom_line() +
facet_wrap(vars(name))
ggplot(data = more_than_10_wins,
mapping = aes(x = days_since_first, y = rolling_win_count)) +
geom_line(aes(colour = name)) +
labs(x = "Number of Days Since First Title",
y = "Total Number of Grand Slam Titles",
colour = "Player")
ggplot(data = more_than_10_wins,
mapping = aes(x = days_since_first, y = rolling_win_count)) +
geom_line(aes(colour = name)) +
facet_grid(rows = vars(gender)) +
labs(x = "Number of Days Since First Title",
y = "Total Number of Grand Slam Titles",
colour = "Player") +
scale_colour_viridis_d() +
theme_bw()
blogdown::serve_site()
x <-
c(
"knitr",
"here",
"scales",
"magrittr",
"cowplot",
"tidyverse",
"Metrics",
"rsample",
"broom",
"sf",
"rgdal",
"summarytools",
"tmap",
"tmaptools",
"lubridate",
"RColorBrewer",
"hrbrthemes",
"ggrepel")
lapply(x, require, character.only = TRUE)
opts_chunk$set(echo = FALSE,
warning = FALSE,
error = FALSE,
message = FALSE,
collapse = TRUE,
comment = NA,
tidy = TRUE,
include = FALSE)
theme_set(theme_ipsum_rc())
x <-
c(
"knitr",
"here",
"scales",
"magrittr",
"cowplot",
"tidyverse",
"Metrics",
"rsample",
"broom",
"summarytools",
"lubridate",
"RColorBrewer",
"hrbrthemes",
"ggrepel")
lapply(x, require, character.only = TRUE)
opts_chunk$set(echo = FALSE,
warning = FALSE,
error = FALSE,
message = FALSE,
collapse = TRUE,
comment = NA,
tidy = TRUE,
include = FALSE)
theme_set(theme_ipsum_rc())
x <-
c(
"knitr",
"here",
"scales",
"cowplot",
"tidyverse",
"Metrics",
"rsample",
"broom",
"summarytools",
"lubridate",
"RColorBrewer",
"hrbrthemes",
"ggrepel")
lapply(x, require, character.only = TRUE)
opts_chunk$set(echo = FALSE,
warning = FALSE,
error = FALSE,
message = FALSE,
collapse = TRUE,
comment = NA,
tidy = TRUE,
include = FALSE)
theme_set(theme_ipsum_rc())
install.packages("Metrics")
install.packages("rsample")
install.packages("summarytools")
x <-
c(
"knitr",
"here",
"scales",
"cowplot",
"tidyverse",
"Metrics",
"rsample",
"broom",
"summarytools",
"lubridate",
"RColorBrewer",
"hrbrthemes",
"ggrepel")
lapply(x, require, character.only = TRUE)
opts_chunk$set(echo = FALSE,
warning = FALSE,
error = FALSE,
message = FALSE,
collapse = TRUE,
comment = NA,
tidy = TRUE,
include = FALSE)
theme_set(theme_ipsum_rc())
import_roboto_condensed()
blogdown::stop_server()
blogdown::loa
blogdown::serve_site()
library(tidylog)
x <-
c("dplyr",
"knitr",
"here",
"scales",
"magrittr",
"ggplot2",
"cowplot",
"tidyverse",
"Metrics",
"rsample",
"broom",
"lubridate",
"safejoin",
"RColorBrewer",
"hrbrthemes",
"ggrepel",
"googlesheets",
"tidylog")
lapply(x, require, character.only = TRUE)
opts_chunk$set(echo = FALSE,
warning = FALSE,
error = FALSE,
message = FALSE,
collapse = TRUE,
comment = NA,
tidy = TRUE,
include = FALSE)
theme_set(theme_ipsum_rc())
options(
digits=4,
scipen = 999
)
knit_hooks$set(inline = function(x) {
prettyNum(round(x,4), big.mark=",")
})
import_roboto_condensed()
moodnotes_gs <-  gs_title("Moodnotes (Responses)")
vitals_gs <-  gs_title("Vitals tracking (Responses)")
meals_gs <-  gs_title("Meal tracker (Responses)")
moodnotes <- gs_read(moodnotes_gs)
vitals<- gs_read(vitals_gs)
meals <- gs_read(meals_gs)
full_data <- moodnotes  %>%
#Join vitals and meals tables
safe_left_join(vitals, by = "Date", conflict = coalesce) %>%
safe_left_join(meals, by = "Date", conflict = coalesce) %>%
#Remove unhelpful variables
select(-Timestamp,
-`Control?_1`) %>%
mutate(Date =  dmy(Date)) %>%
filter(Date >= "2019-03-01" & Date <= "2019-03-31")
install.packages('safejoin')
nstall.packages("remotes")
remotes::install_github("moodymudskipper/safejoin")
install.packages("rlang")
install.packages("rlang")
