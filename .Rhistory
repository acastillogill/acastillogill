blogdown:::update_meta_addin()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown:::serve_site()
library(blogdown)
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
update.packages(ask = FALSE, checkBuilt = TRUE)
install.packages("httpuv")
if (!require("devtools")) install.packages("devtools")
devtools::install_github("rstudio/httpuv")
blogdown::serve_site()
reprex()
library(reprex)
reprex:::reprex_addin()
library(blogdown)
library(httpuv)
blogdown::serve_site()
x <-
c("tidyverse",
"bookdown",
"knitr",
"kableExtra",
"formatR",
"stringr",
"rebus",
"quantmode",
"skimr",
"lubridate",
"broom",
"tidyr",
"GGally")
lapply(x, require, character.only = TRUE)
opts_chunk$set(echo = TRUE,
warning = FALSE,
error = FALSE,
message = FALSE,
collapse= TRUE,
comment = NA,
tidy = FALSE)
path <- "/Volumes/TOSHIBAEXT/RStudio/blog/content/post/kiva_data/"
#Read `kiva_loans.csv`
kiva_loans <- read_csv(paste(path,"kiva_loans.csv",sep = ""))
#Read `kiva_mpi_region_locations.csv`
kiva_locations <- read_csv(paste(path,"kiva_mpi_region_locations.csv",sep=""))
#Read `loan_theme_ids.csv`
kiva_themes <- read_csv(paste(path,"loan_theme_ids.csv",sep=""))
#Read`loan_themes_by_region.csv`
kiva_locations_themes <- read_csv(paste(path,"loan_themes_by_region.csv",sep=""))
#Get a glimpse of kiva_loans
glimpse(kiva_loans)
#Select variables
kiva_loans %>%
dplyr::select (id,
loan_amount,
sector,
country_code,
currency,
posted_time,
disbursed_time,
term_in_months,
lender_count,
borrower_genders,
repayment_interval,
funded_time) -> kiva_loans
#Convert country_code, sector, currency, borrower_genders, and repayment_interval to factors.
categorical <- c("sector",
"country_code",
"currency",
"borrower_genders",
"repayment_interval")
kiva_loans[categorical] <- lapply(kiva_loans[categorical],
factor)
summary(kiva_loans)
#Turn kiva_loans back into an atomic vector of characters
kiva_loans$borrower_genders <- as.character(kiva_loans$borrower_genders)
#Split each row into multiple strings
genders <- str_split(kiva_loans$borrower_genders, ", ")
library(stringi)
library(stringr)
x <-
c("tidyverse",
"bookdown",
"knitr",
"kableExtra",
"formatR",
"stringr",
"rebus",
"quantmode",
"skimr",
"lubridate",
"broom",
"tidyr",
"GGally")
lapply(x, require, character.only = TRUE)
opts_chunk$set(echo = TRUE,
warning = FALSE,
error = FALSE,
message = FALSE,
collapse= TRUE,
comment = NA,
tidy = FALSE)
path <- "/Volumes/TOSHIBAEXT/RStudio/blog/content/post/kiva_data/"
#Read `kiva_loans.csv`
kiva_loans <- read_csv(paste(path,"kiva_loans.csv",sep = ""))
#Read `kiva_mpi_region_locations.csv`
kiva_locations <- read_csv(paste(path,"kiva_mpi_region_locations.csv",sep=""))
#Read `loan_theme_ids.csv`
kiva_themes <- read_csv(paste(path,"loan_theme_ids.csv",sep=""))
#Read`loan_themes_by_region.csv`
kiva_locations_themes <- read_csv(paste(path,"loan_themes_by_region.csv",sep=""))
#Get a glimpse of kiva_loans
glimpse(kiva_loans)
#Select variables
kiva_loans %>%
dplyr::select (id,
loan_amount,
sector,
country_code,
currency,
posted_time,
disbursed_time,
term_in_months,
lender_count,
borrower_genders,
repayment_interval,
funded_time) -> kiva_loans
#Convert country_code, sector, currency, borrower_genders, and repayment_interval to factors.
categorical <- c("sector",
"country_code",
"currency",
"borrower_genders",
"repayment_interval")
kiva_loans[categorical] <- lapply(kiva_loans[categorical],
factor)
summary(kiva_loans)
#Turn kiva_loans back into an atomic vector of characters
kiva_loans$borrower_genders <- as.character(kiva_loans$borrower_genders)
#Split each row into multiple strings
genders <- str_split(kiva_loans$borrower_genders, ", ")
x <-
c("tidyverse",
"bookdown",
"knitr",
"kableExtra",
"formatR",
"stringr",
"rebus",
"quantmode",
"skimr",
"lubridate",
"broom",
"tidyr",
"GGally")
lapply(x, require, character.only = TRUE)
opts_chunk$set(echo = TRUE,
warning = FALSE,
error = FALSE,
message = FALSE,
collapse= TRUE,
comment = NA,
tidy = FALSE)
path <- "/Volumes/TOSHIBAEXT/RStudio/blog/content/post/kiva_data/"
#Read `kiva_loans.csv`
kiva_loans <- read_csv(paste(path,"kiva_loans.csv",sep = ""))
#Read `kiva_mpi_region_locations.csv`
kiva_locations <- read_csv(paste(path,"kiva_mpi_region_locations.csv",sep=""))
#Read `loan_theme_ids.csv`
kiva_themes <- read_csv(paste(path,"loan_theme_ids.csv",sep=""))
#Read`loan_themes_by_region.csv`
kiva_locations_themes <- read_csv(paste(path,"loan_themes_by_region.csv",sep=""))
#Get a glimpse of kiva_loans
glimpse(kiva_loans)
#Select variables
kiva_loans %>%
dplyr::select (id,
loan_amount,
sector,
country_code,
currency,
posted_time,
disbursed_time,
term_in_months,
lender_count,
borrower_genders,
repayment_interval,
funded_time) -> kiva_loans
#Convert country_code, sector, currency, borrower_genders, and repayment_interval to factors.
categorical <- c("sector",
"country_code",
"currency",
"borrower_genders",
"repayment_interval")
kiva_loans[categorical] <- lapply(kiva_loans[categorical],
factor)
summary(kiva_loans)
#Turn kiva_loans back into an atomic vector of characters
kiva_loans$borrower_genders <- as.character(kiva_loans$borrower_genders)
#Split each row into multiple strings
genders <- str_split(kiva_loans$borrower_genders, ", ")
#Assign 1 for female and 0 for male
females_count <- lapply(genders, str_count, pattern="female")
#Count how many females are in each list element
females_sum <- lapply(females_count, sum)
#Create a function that takes the two lists just made
compare_genders <- function(females_count, females_sum){
#Set "single_female" when female sum and length is 1
ifelse (females_sum==1&&length(females_count)==1, "single_female",
#Set "mult_females" when female sum and length females_count is the same and different to zero
ifelse(females_sum==length(females_count)&&females_sum!=0,"mult_females",
#Set "single_male" #Set "mult_males" when female sum is zero and the count of individuals is 1
ifelse(females_sum==0&&length(females_count)==1,"single_male",
#Set "mult_males" when female sum is zero and the count of individuals is greater than 1
ifelse(females_sum==0&&length(females_count)>1,"mult_males",
#Set "mixed_genders" when the sum of females is different to the count of individual
ifelse(females_sum!=length(females_count),"mixed_genders","strange")))))
}
#Apply function compare_genders
kiva_loans$borrower_genders <- mapply(compare_genders,females_count,females_sum)
#Make kiva_loans$borrower_genders a factor again
kiva_loans$borrower_genders <- as.factor(kiva_loans$borrower_genders)
#Check levels
levels(kiva_loans$borrower_genders)
for (curr in levels(kiva_loans$currency))
#Check that all currencies do not return any errors when requesting a currency conversion
tryCatch(quantmod::getQuote(paste0(curr, "=X")), error = print)
#Turning kiva_loans back into a character vector
kiva_loans$currency <- as.character(kiva_loans$currency)
kiva_loans%>%
#Filter out "SSP"
dplyr::filter(currency!="SSP")%>%
#Filter out "ZWD"
filter(currency!="ZWD")->kiva_loans
#Turn kiva_loans$currency back into a factor
kiva_loans$currency <- as.factor(kiva_loans$currency)
#Store all levels as vector `from`
from <- as.vector(levels(kiva_loans$currency))
#Create a vector `to` with requested currency "USD"
to <- rep(length(levels(kiva_loans$currency)),x="USD")
#Create a dataframe `currencies` with conversion rates `Last`
currencies <- quantmod::getQuote(paste0(from, to, "=X"))
#Set row names as columns in the currencies dataframe
currencies <- rownames_to_column(currencies)
#Split currencies$rownames by extracting the first 3 characters
currencies$currency <-  substring(currencies$rowname, 1,3)
kiva_loans%>%
#Join currencies to kiva_loans by="currency"
left_join(currencies, by="currency") -> kiva_loans
kiva_loans%>%
#Convert the loan from its original currency to USD
mutate(loan_usd=loan_amount*Last)-> kiva_loans
#Read `country_continent.csv`
continents <- read_csv(paste(path,"country_continent.csv",sep = ""))
kiva_loans%>%
#Join currencies to kiva_loans by="country_code"
left_join(continents, by="country_code") -> kiva_loans
kiva_loans$continent <- as.factor(kiva_loans$continent)
levels(kiva_loans$continent)
kiva_loans%>%
mutate(total_time_num=as.numeric(difftime(posted_time,
disbursed_time,
units = "days")),
giving_time_num=as.numeric(difftime(funded_time,
posted_time,
units = "days"))) ->kiva_loans
#Select variables
kiva_loans %>%
dplyr::select (id,
loan_usd,
sector,
continent,
term_in_months,
lender_count,
borrower_genders,
repayment_interval,
total_time_num,
giving_time_num,
country_code,
posted_time,
funded_time,
disbursed_time)%>%
arrange(posted_time)-> kiva_loans
kiva_loans$country_code <- as.factor(kiva_loans$country_code)
kiva_loans$id <- as.character(kiva_loans$id)
#Skim the dataset
skim(kiva_loans)
prop.table(table(kiva_loans$borrower_genders))
prop.table(table(kiva_loans$continent))
prop.table(table(kiva_loans$repayment_interval))
prop.table(table(kiva_loans$sector))
kiva_loans <-  kiva_loans%>%
filter(continent!="EU",
repayment_interval!="weekly",
sector!="Construction"&
sector!="Entertainment"&
sector!= "Manufacturing"&
sector!= "Wholesale")%>%
droplevels()
# Create side-by-side barchart of borrower_genders by continent
ggplot(kiva_loans, aes(x = continent, fill = borrower_genders)) +
geom_bar(position = "dodge") +theme_classic()
#Create side-by-side barchart of repayment interval by continent
ggplot(kiva_loans,
aes(x = continent, fill = repayment_interval)) +
geom_bar(position = "dodge")+
theme_classic()+
blogdown::serve_site()
# Create side-by-side barchart of sector by continent
ggplot(kiva_loans, aes(x = continent, fill = sector)) +
geom_bar(position = "dodge")+ theme_classic()
blogdown::serve_site()
library(datasets)
data(iris)
glimpse(iris)
levels(iris$Species)
iris%>%
filter(Species=="virginica")
iris%>%
filter(Species=="virginica")%>%
dplyr::summarise(mean=mean(Sepal.Length))
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
library(datasets)
data(iris)
library(datasets)
data(mtcars)
glimpse(mtcars)
mtcars%>%
group_by(cyl)%>%
dplyr::summarise(mean=mean(mpg))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
lapply(mtcars, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
glimpse(mtcars)
mtcars%>%
group_by(cyl)%>%
dplyr::summarise(mean=mean(hp))
209.21429	- 82.63636
debug(ls)
ls
Q
undebug(ls)
ls
