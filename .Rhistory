# Chunk 10: plot-without-outliers
downloads_internet_plot_out<- outliers_gone%>%
arrange(desc(n))%>%
ggplot(aes(users, n, label=name, color=region))+
#Add light opacity
geom_jitter()+
#Add nice commas x axis
scale_x_continuous(labels=comma_format())+
#Add nice commas y axis
scale_y_continuous(labels=comma_format())+
#Add a linear regression line for all regions
geom_smooth(aes(group=1),method="lm")+
#Fix legend
theme(legend.position = "bottom", legend.title = element_blank())+
#Add title
labs(title="Do R-Language downloads increase with more internet users?",
subtitle = "China, India, United Kingdom, and Germany removed.",
y="Downloads per country",
x="Internet users in each country")
ggplotly(downloads_internet_plot_out)%>%
layout(legend = list(orientation = "h", x = 0.4, y = -0.2))
# Chunk 11: read-hdi-index
human_dev_ind <-read_csv(here("static","data","HDI.csv"))
# Chunk 12: merge-hdi-users
downloads_hdi_country <-downloads_users_country%>%
right_join(human_dev_ind, by=c("name"="name"))%>%
arrange(desc(HDI))%>%
filter(!is.na(name),
!is.na(users),
!is.na(n),
!is.na(HDI))
# Chunk 13: hdi-downloads-plot
downloads_hdi_plot<- downloads_hdi_country%>%
ggplot(aes(x=HDI, y=n, label=name, color=region))+
#Add light opacity
geom_jitter()+
#Add nice commas x axis
scale_x_continuous(labels=percent_format())+
#Add nice commas y axis
scale_y_continuous(labels=comma_format())+
#Add a linear regression line for all regions
geom_smooth(aes(group=1),method="lm")+
#Fix legend
theme(legend.position = "bottom", legend.title = element_blank())+
#Add title
labs(title="Human Development Index (HDI) and R downloads.",
y="Downloads per country",
x="Human Development Index")
ggplotly(downloads_hdi_plot)
# Chunk 14: checking-correlation
cor(downloads_hdi_country$users,downloads_hdi_country$HDI)*100
# Chunk 15: fitting-hdi-users
internet_fit <- lm(n ~ users, data=downloads_hdi_country)
hdi_fit <- lm(n ~ users + HDI, data=downloads_hdi_country)
summary(hdi_fit)$coef
# Chunk 16: diagnostics-hdi-users
par(mfrow=c(2,2))
plot(hdi_fit)
# Chunk 17
summary(hdi_fit)$adj.r.squared*100
# Chunk 18: read-three-new-indicators
standard_liv <- read_csv(here("static","data","GNIPC.csv"))
standard_liv$GNI <- as.integer(standard_liv$GNI)
life_exp <- read_csv(here("static","data","life_exp.csv"))
edu_year <- read_csv(here("static","data","edu_year.csv"))
pop <-read_csv(here("static","data","country_populations.csv"))
edu_year <- edu_year%>%
filter(Indicator=="Mean years of schooling (ISCED 1 or higher), population 25+ years, both sexes",
year==2016)%>%
select(country,educ)
# Chunk 19: join-new-indicators
full_hdi <- downloads_hdi_country%>%
left_join(pop, by=c("name"="name"))%>%
left_join(standard_liv, by=c(`alpha-3`="iso"))%>%
left_join(life_exp, by=c(`country-code`="country_code"))%>%
left_join(edu_year, by=c(`alpha-3`="country"))%>%
arrange(name)
# Chunk 20: life-exp-plot
life_exp_plot<- full_hdi%>%
ggplot(aes(x=life_exp, y=n, label=name, color=region))+
#Add light opacity
geom_jitter(alpha=0.3)+
#Add nice commas y axis
scale_y_continuous(labels=comma_format())+
#Add a linear regression line for all regions
geom_smooth(aes(group=1),method="lm")+
#Remove legend
theme(legend.position = "none")+
#Add title
labs(title="Life expectancy at birth and R downloads.",
y="Downloads per country",
x="Life expectancy at birth (Years)")
# Chunk 21: educ-plot
educ_plot<- full_hdi%>%
ggplot(aes(x=educ, y=n, label=name, color=region))+
#Add light opacity
geom_jitter(alpha=0.3)+
#Add nice commas y axis
scale_y_continuous(labels=comma_format())+
#Add a linear regression line for all regions
geom_smooth(aes(group=1),method="lm")+
#Fix legend
theme(legend.position = "bottom", legend.title = element_blank())+
#Add title
labs(title="Mean years of schooling (years) and R downloads.",
y="Downloads per country",
x="Mean years of schooling (years)")
# Chunk 22: GNI_plot
GNI_plot<- full_hdi%>%
ggplot(aes(x=GNI, y=n, label=name, color=region))+
#Add light opacity
geom_jitter(alpha=0.3)+
#Add nice commas x axis
scale_x_continuous(labels=dollar_format())+
#Add nice commas y axis
scale_y_continuous(labels=comma_format())+
#Add a linear regression line for all regions
geom_smooth(aes(group=1),method="lm")+
#Remove legend
theme(legend.position = "none")+
#Add title
labs(title="Gross National Income and R downloads.",
y="Downloads per country",
x="Gross National Income")
# Chunk 23: plot-three-HDI
plot_grid(life_exp_plot, educ_plot, GNI_plot)
# Chunk 24: four-var-fit
four_fit <- lm(n ~ users + GNI + educ + life_exp, data=full_hdi)
summary(four_fit)$coef
# Chunk 25: population-fit
pop_fit <- lm(n ~ pop_2018 + HDI, data=full_hdi, na.action = na.omit)
summary(pop_fit)$coef
# Chunk 26: nesting-models
library(broom)
nested_hdi <- full_hdi%>%
group_by(region)%>%
nest()
# Chunk 27: mean-downloads-per-region
downloads_nested <- nested_hdi %>%
mutate(mean_n = map_dbl(data, ~mean(.x$n)))
# Extract the mean_n value by using unnest
downloads_mean <- downloads_nested %>%
unnest(mean_n)
# Chunk 28: linear-model-for-each-region
regression_each_region <- nested_hdi %>%
mutate(model=map(data, ~lm(formula=n~HDI+users, data=.x)))
# Chunk 29: extracting-coefficients
# Extract the coefficient statistics of each model into nested dataframes
model_coef_nested <- regression_each_region %>%
mutate(coef = map(model, ~tidy(.x)))
# Simplify the coef dataframes for each model
model_coef <- model_coef_nested %>%
unnest(coef)
# Chunk 30: assessing-model-fit
# Extract the fit statistics of each model into dataframes
model_perf_nested <- regression_each_region %>%
mutate(fit = map(model, ~glance(.x)))
# Simplify the fit dataframes for each model
model_perf <- model_perf_nested %>%
unnest(fit)
# Look at the first six rows of model_perf
head(model_perf)
# Chunk 31: ranking fit
# Plot a histogram of rsquared for the 77 models
model_perf %>%
ggplot(aes(x = r.squared)) +
geom_histogram()
# Extract the 4 best fitting models
best_fit <- model_perf %>%
top_n(n = 2, wt = r.squared)
# Extract the 4 models with the worst fit
worst_fit <- model_perf %>%
top_n(n = 2, wt = -r.squared)
# Chunk 32: visualising-model-fit
best_augmented <- best_fit %>%
# Build the augmented dataframe for each country model
mutate(augmented = map(model, ~augment(.x))) %>%
# Expand the augmented dataframes
unnest(augmented)
worst_augmented <- worst_fit %>%
# Build the augmented dataframe for each country model
mutate(augmented = map(model, ~augment(.x))) %>%
# Expand the augmented dataframes
unnest(augmented)
# Chunk 33: best-mods
# Compare the predicted values with the actual values of life expectancy
# for the top 4 best fitting models
best_augmented %>%
ggplot(aes(x = HDI)) +
geom_point(aes(y = n)) +
geom_line(aes(y = .fitted), color = "red") +
facet_wrap(~region, scales = "free_y")
# Chunk 34: worst-mods
worst_augmented %>%
ggplot(aes(x = HDI)) +
geom_point(aes(y = n)) +
geom_line(aes(y = .fitted), color = "red") +
facet_wrap(~region, scales = "free_y")
?nest
downloads_nested
downloads_mean <- downloads_nested %>%
unnest(mean_n)
downloads_mean
downloads_mean$region[[5]]
downloads_mean$region[[5]]%>%unnest()
oceania <- downloads_mean$region[[5]]
oceania
oceania <- downloads_nested$region[[5]]
oceania
downloads_nested
downloads_nested <- nested_hdi %>%
mutate(mean_n = map_dbl(data, ~mean(.x$n)))
# Extract the mean_n value by using unnest
downloads_mean <- downloads_nested %>%
unnest(mean_n)
downloads_mean <- downloads_nested %>%
unnest(mean_n)
downloads_mean
# Extract the mean_n value by using unnest
downloads_nested %>%
unnest(mean_n)%>%
ggplot(aes(x=region, y=mean_n))+
geom_col()
downloads_nested <- nested_hdi %>%
mutate(mean_n = map_dbl(data, ~mean(.x$n)))
# Extract the mean_n value by using unnest
downloads_nested %>%
unnest(mean_n)%>%
ggplot(aes(x=region, y=mean_n))+
geom_col()+
coord_flip()
downloads_nested <- nested_hdi %>%
mutate(mean_n = map_dbl(data, ~mean(.x$n)))
# Extract the mean_n value by using unnest
downloads_nested %>%
unnest(mean_n)%>%
arrange(desc(mean_n))
ggplot(aes(x=region, y=mean_n))+
geom_col()+
coord_flip()
downloads_nested <- nested_hdi %>%
mutate(mean_n = map_dbl(data, ~mean(.x$n)))
# Extract the mean_n value by using unnest
downloads_nested %>%
unnest(mean_n)%>%
arrange(desc(mean_n))%>%
ggplot(aes(x=region, y=mean_n))+
geom_col()+
coord_flip()
downloads_nested <- nested_hdi %>%
mutate(median_n = map_dbl(data, ~median(.x$n)))
# Extract the mean_n value by using unnest
downloads_nested %>%
unnest(median_n)%>%
arrange(desc(median_n))%>%
ggplot(aes(x=region, y=median_n))+
geom_col()+
coord_flip()
downloads_nested <- nested_hdi %>%
mutate(median_n = map_dbl(data, ~median(.x$n)))
# Extract the mean_n value by using unnest
downloads_nested %>%
unnest(median_n)%>%
arrange(desc(median_n))%>%
mutate(region=fct_reorder(region,median_n))%>%
ggplot(aes(x=region, y=median_n))+
geom_col()+
coord_flip()
downloads_nested <- nested_hdi %>%
mutate(median_n = map_dbl(data, ~median(.x$n)))
# Extract the mean_n value by using unnest
downloads_nested %>%
unnest(median_n)%>%
arrange(desc(median_n))%>%
mutate(region=fct_reorder(region,median_n))%>%
ggplot(aes(x=region, y=median_n, fill=region))+
geom_col()+
coord_flip()
downloads_nested <- nested_hdi %>%
mutate(median_n = map_dbl(data, ~median(.x$n)))
# Extract the mean_n value by using unnest
downloads_nested %>%
unnest(median_n)%>%
arrange(desc(median_n))%>%
mutate(region=fct_reorder(region,median_n))%>%
ggplot(aes(x=region, y=median_n, fill=region))+
geom_col()+
expand_limits(y=0)+
coord_flip()+
scale_y_continuous(labels=comma_format())+
labs(title="Median R Downloads per region",
x="Region",
y="R Downloads")+
theme(legend.position = "none")
downloads_nested <- nested_hdi %>%
mutate(median_n = map_dbl(data, ~median(.x$n)))
# Extract the mean_n value by using unnest
downloads_nested %>%
unnest(median_n)%>%
arrange(desc(median_n))%>%
mutate(region=fct_reorder(region,median_n))%>%
ggplot(aes(x=region, y=median_n, fill=region))+
geom_col()+
expand_limits(y=0)+
coord_flip()+
scale_y_continuous(labels=comma_format())+
labs(title="Median R Downloads per region",
x="",
y="R Downloads")+
theme(legend.position = "none")
downloads_per_country%>%
arrange(desc(n))%>%
filter(!is.na(name))%>%
head(20)%>%
mutate(name=fct_reorder(name,n))%>%
ggplot(aes(name,n,fill=name))+
geom_col()+
expand_limits(y=0)+
coord_flip()+
scale_y_continuous(labels=comma_format())+
labs(title="Top 20 countries by R downloads",
x="",
y="Downloads")+
theme(legend.position = "none")
regression_each_region <- nested_hdi %>%
mutate(model=map(data, ~lm(formula=n~HDI+users, data=.x)))
# Extract the coefficient statistics of each model into nested dataframes
model_coef_nested <- regression_each_region %>%
mutate(coef = map(model, ~tidy(.x)))
# Simplify the coef dataframes for each model
model_coef <- model_coef_nested %>%
unnest(coef)
model_coef
model_coef%>%
arrange(desc(p.value))
model_coef%>%
arrange(p.value)
regression_each_region <- nested_hdi %>%
mutate(model=map(data, ~lm(formula=n~users + GNI + educ + life_exp, data=.x)))
# Extract the coefficient statistics of each model into nested dataframes
model_coef_nested <- regression_each_region %>%
mutate(coef = map(model, ~tidy(.x)))
# Simplify the coef dataframes for each model
model_coef <- model_coef_nested %>%
unnest(coef)
model_coef%>%
arrange(p.value)
model_coef%>%
filter(p.value<0.05)%>%
arrange(p.value)
regression_each_region <- nested_hdi %>%
mutate(model=map(data, ~lm(formula=n~users + HDI, data=.x)))
# Extract the coefficient statistics of each model into nested dataframes
model_coef_nested <- regression_each_region %>%
mutate(coef = map(model, ~tidy(.x)))
# Simplify the coef dataframes for each model
model_coef <- model_coef_nested %>%
unnest(coef)
model_coef%>%
filter(p.value<0.05)%>%
arrange(p.value)
model_coef%>%
filter(p.value<0.05)%>%
arrange(p.value)%>%
table
model_coef%>%
filter(p.value<0.05)%>%
arrange(p.value)%>%
table()
model_coef%>%
filter(p.value<0.05)%>%
arrange(p.value)
model_coef%>%
filter(p.value<0.05)%>%
arrange(p.value)%>%
kable()
library(dplyr)
library(knitr)
library(here)
library(scales)
library(magrittr)
library(ggplot2)
library(cowplot)
library(tidyverse)
opts_chunk$set(echo = TRUE,
warning = FALSE,
error = FALSE,
message = FALSE,
collapse= TRUE,
comment = NA,
tidy = TRUE)
theme_set(theme_light())
options(
ggplot2.discrete.colour = "viridis",
ggplot2.discrete.fill = "viridis",
ggplot2.continuous.colour = "viridis",
ggplot2.continuous.fill = "viridis",
digits=3,
scipen = 999
)
r_downloads <- readRDS(file=here::here("static","data","r-downloads.rds"))
blogdown::serve_site()
model_coef%>%
#Filter significant coefficient
filter(p.value<0.05)%>%
arrange(p.value)%>%
kable()
model_coef%>%
#Filter significant coefficient
filter(p.value<0.05)%>%
arrange(p.value)%>%
kable()
# Extract the fit statistics of each model into dataframes
model_perf_nested <- regression_each_region %>%
mutate(fit = map(model, ~glance(.x)))
# Simplify the fit dataframes for each model
model_perf <- model_perf_nested %>%
unnest(fit)
model_perf
names(model_perf)
#Make a table with model fit in descending order #Filter significant coefficient
model_perf%>%
arrange(desc(adj.r.squared))%>%
select(region, adj.r.squared)%>%
kable(caption="The model describing R downloads as a function of internet users per country and the HDI has significant coefficients for Asia and Europe.")
#Make a table with model fit in descending order #Filter significant coefficient
model_perf%>%
arrange(desc(adj.r.squared), p.value)%>%
select(region, adj.r.squared, )%>%
kable(caption="The model describing R downloads as a function of internet users per country and the HDI has significant coefficients for Asia and Europe.")
#Make a table with model fit in descending order #Filter significant coefficient
model_perf%>%
arrange(desc(adj.r.squared), p.value)%>%
select(region, adj.r.squared)%>%
kable(caption="The model describing R downloads as a function of internet users per country and the HDI has significant coefficients for Asia and Europe.")
#Make a table with model fit in descending order #Filter significant coefficient
model_perf%>%
arrange(desc(adj.r.squared), p.value)%>%
select(region, adj.r.squared, p.value)%>%
kable(caption="The model describing R downloads as a function of internet users per country and the HDI has significant coefficients for Asia and Europe.")
best_fit_models <- model_perf%>%
top_n(2, wt=adj.r.squared)
best_fit_models
downloads_hdi_plot<- downloads_hdi_country%>%
ggplot(aes(x=HDI, y=n, label=name, color=region))+
#Add light opacity
geom_jitter()+
#Add nice commas x axis
scale_x_continuous(labels=percent_format())+
#Add nice commas y axis
scale_y_continuous(labels=comma_format())+
#Add a linear regression line for all regions
geom_smooth(aes(group=1),method="lm")+
#Fix legend
theme(legend.position = "bottom", legend.title = element_blank())+
#Add title
labs(title="Human Development Index (HDI) and R downloads.",
y="Downloads per country",
x="Human Development Index")
ggplotly(downloads_hdi_plot)
downloads_hdi_plot<- na.omit(downloads_hdi_country)%>%
ggplot(aes(x=HDI, y=n, label=name, color=region))+
#Add light opacity
geom_jitter()+
#Add nice commas x axis
scale_x_continuous(labels=percent_format())+
#Add nice commas y axis
scale_y_continuous(labels=comma_format())+
#Add a linear regression line for all regions
geom_smooth(aes(group=1),method="lm")+
#Fix legend
theme(legend.position = "bottom", legend.title = element_blank())+
#Add title
labs(title="Human Development Index (HDI) and R downloads.",
y="Downloads per country",
x="Human Development Index")
ggplotly(downloads_hdi_plot)
downloads_hdi_plot<- na.omit(downloads_hdi_country)%>%
ggplot(aes(x=HDI, y=n, label=name, color=region))+
#Add light opacity
geom_jitter()+
#Add nice commas x axis
scale_x_continuous(labels=percent_format())+
#Add nice commas y axis
scale_y_continuous(labels=comma_format())+
#Add a linear regression line for all regions
geom_smooth(aes(group=1),method="lm")+
#Fix legend
theme(legend.position = "bottom", legend.title = element_blank())+
#Add title
labs(title="Human Development Index (HDI) and R downloads.",
y="Downloads per country",
x="Human Development Index")
ggplotly(downloads_hdi_plot)
downloads_hdi_plot<- downloads_hdi_country%>%
ggplot(aes(x=HDI, y=n, label=name, color=region))+
#Add light opacity
geom_jitter()+
#Add nice commas x axis
scale_x_continuous(labels=percent_format())+
#Add nice commas y axis
scale_y_continuous(labels=comma_format())+
#Add a linear regression line for all regions
geom_smooth(aes(group=1),method="lm")+
#Fix legend
theme(legend.position = "bottom", legend.title = element_blank())+
#Add title
labs(title="Human Development Index (HDI) and R downloads.",
y="Downloads per country",
x="Human Development Index")
ggplotly(downloads_hdi_plot)
blogdown::serve_site()
