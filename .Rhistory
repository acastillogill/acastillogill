wday(tyme$date, label=TRUE)%>%table
library(dplyr)
library(ggplot2)
library(ggridges)
library(skimr)
library(lubridate)
library(openxlsx)
tyme<-readr::read_csv("tyme.csv")
tyme <- tyme %>% dplyr::select(-c(note,rounding_method,rounding_minutes,
sum, rate,amount_decimal,amount,subtask,
unix_end,unix_start,type
))
#Convert to factors and dates
to_factors <- c("day","category","project","task")
tyme[to_factors] <- lapply(tyme[to_factors],as.factor)
tyme <- tyme %>%
mutate(datetime_start=dmy_hms(paste(date,start)),
datetime_end=dmy_hms(paste(date,end)))%>%
mutate(duration=difftime(datetime_end,datetime_start,units="hours"))
glimpse(tyme)
wday(tyme$date, label=TRUE)%>%table
library(lubridate)
wday(tyme$date, label=TRUE)%>%table
args(wday)
#Extract day of the week
lubridate::wday(tyme$date, label=TRUE)%>%table
#Extract day of the week
hour(tyme$date)%>%table
# How often is the hour before 12 (noon)?
mean(hour(tyme$date) < 12)
# Create column wday to hold labelled week days
tyme$wday <- wday(tyme$date, label=TRUE)
#Extract day of the week
lubridate::wday(tyme$date, label=TRUE)%>%table
#Extract day of the week
hour(tyme$date)%>%table
# How often is the hour before 12 (noon)?
mean(hour(tyme$date) < 12)
# Create column wday to hold labelled week days
lubridate::tyme$wday <- wday(tyme$date, label=TRUE)
#Extract day of the week
lubridate::wday(tyme$date, label=TRUE)%>%table
#Extract day of the week
hour(tyme$date)%>%table
# How often is the hour before 12 (noon)?
mean(hour(tyme$date) < 12)
# Create column wday to hold labelled week days
tyme$wday <- lubridate::wday(tyme$date, label=TRUE)
# Plot barchart of weekday worked
tyme%>%
group_by(category,wday)%>%
mutate(duration_day=sum(duration))%>%
ggplot(aes(x=category,fill=cut(as.numeric(duration_day),breaks=10))) +
geom_bar(position="fill") +
theme(axis.text.x = element_text(angle = 90,hjust=1)) +
facet_wrap(~ wday, ncol = 1)+
theme_minimal()+
scale_fill_viridis_d()
#Extract day of the week
lubridate::wday(tyme$date, label=TRUE)%>%table
#Extract day of the week
hour(tyme$date)%>%table
# How often is the hour before 12 (noon)?
mean(hour(tyme$date) < 12)
# Add columns for year, yday and month
tyme <- tyme %>%
mutate(
year = year(datetime_start),
yday = yday(datetime_start),
month = month(datetime_start, label = TRUE))
# Add columns for year, yday and month
tyme <- tyme %>%
dplyr::mutate(
year = year(datetime_start),
yday = yday(datetime_start),
month = month(datetime_start, label = TRUE))
# Add columns for year, yday and month
tyme <- tyme %>%
mutate(
year = year(datetime_start),
yday = yday(datetime_start),
month = lubridate::month(datetime_start, label = TRUE))
# Examine distribtion of category by yday
ggplot(tyme, aes(x = duration,
y = month,
height = ..density..,
color=month,
fill=month)) +
geom_density_ridges(stat = "density",alpha=0.5)
#Use of time only during weekdays
tyme%>%
filter(wday(date) %in% 2:6)%>%
ggplot(aes(x = duration,
y = category,
fill=category,
color=category,
height = ..density..)) +
geom_density_ridges(stat = "density",alpha=0.5)+
theme_minimal()+
labs(x="Session duration",
y="Category",
title="Session duration per category")
list <- list("Admin","Writing","PhD","Applications","Career skills","Maintenance","Network")
names(list) <- c("Admin","Writing","PhD","Applications","Career skills","Maintenance","Network")
task_plot <- function(tyme,list){
tyme%>%
filter(category==list)%>%
ggplot(aes(x=reorder(task,duration),
y=duration,
color=project))+
geom_jitter()+
theme_minimal()+
labs(y = "Session duration",
x = "Task",
title=paste(list,"time allocation by task and project for month",month(Sys.Date()-1)))+
theme(axis.text.x = element_text(angle=90,hjust=1))+
guides(color=guide_legend(title = "Project"))+
theme(legend.position = "top")
}
task_summary <- function(tyme,list){
tyme%>%
filter(category==list)%>%
group_by(task)%>%
summarise(time_spent=sum(duration))%>%
arrange(desc(time_spent))
}
lapply(list,task_summary,tyme=tyme)
lapply(list,task_plot,tyme=tyme)
categories_month <- function(tyme,list){
tyme%>%
ggplot(aes(x=reorder(category,duration),
y=duration,
fill=category))+
geom_col()+
coord_flip()+
theme_minimal()+
labs(y = "Session duration",
x = "Category",
title=paste(list,"time allocation per month"))+
theme(axis.text.x = element_text(angle=90,hjust=1))+
guides(color=guide_legend(title = "none"))+
theme(legend.position = "top")
}
project_month <- function(tyme,list){
tyme%>%
ggplot(aes(x=reorder(project,duration),
y=duration,
fill=project))+
geom_col()+
coord_flip()+
theme_minimal()+
labs(y = "Session duration",
x = "Project",
title=paste(list,"time allocation per month"))+
theme(axis.text.x = element_text(angle=90,hjust=1))+
guides(color=guide_legend(title = "none"))+
theme(legend.position = "top")
}
lapply(list,categories_month,tyme=tyme)
lapply(list,project_month,tyme=tyme)
#Session duration in hours
ggplot(tyme,aes(x=duration))+
geom_density()
tyme %>%
group_by(category,month)%>%
summarise(session_length=sum(duration))%>%
ggplot(aes(x=reorder(category,session_length),
y=session_length,
fill=category))+
geom_col()+
coord_flip()+
theme_minimal()+
theme(legend.position="none")+
labs(y = "Session duration",
x = "Task",
title="Time allocation by category and month")+
facet_wrap(~month )+
theme(axis.text.x = element_text(angle=90,hjust=1))
tyme %>%
group_by(project,month)%>%
summarise(session_length=sum(duration))%>%
ggplot(aes(x=reorder(project,session_length),
y=session_length,
fill=project))+
geom_col()+
coord_flip()+
theme_minimal()+
theme(legend.position="none")+
labs(y = "Session duration",
x = "Project",
title="Time allocation by project and month")+
theme(axis.text.x = element_text(angle=90,hjust=1))+
facet_wrap(~month)
tyme %>%
group_by(project,month)%>%
summarise(session_length=sum(duration))%>%
ggplot(aes(x=reorder(project,session_length),
y=session_length,
fill=project))+
geom_col()+
coord_flip()+
theme_minimal()+
theme(legend.position="none")+
labs(y = "Session duration",
x = "Project",
title="Time allocation by project and month")+
theme(axis.text.x = element_text(angle=90,hjust=1))+
facet_wrap(~month)
tyme %>%
group_by(category,wday)%>%
summarise(session_length=sum(duration))%>%
ggplot(aes(x=reorder(category,session_length),
y=session_length,
fill=category))+
geom_col()+
coord_flip()+
theme_minimal()+
facet_wrap(~wday)+
theme(axis.text.x = element_text(angle=90,hjust=1))
tyme %>%
group_by(project,wday)%>%
summarise(session_length=sum(duration))%>%
ggplot(aes(x=reorder(project,session_length),
y=session_length,
fill=project))+
geom_col()+
coord_flip()+
theme_minimal()+
theme(legend.position="none")+
labs(y = "Session duration",
x = "Project",
title="Time allocation by project and day of the week")+
facet_wrap(~wday)+
theme(axis.text.x = element_text(angle=90,hjust=1))
tyme%>%
group_by(category)%>%
summarise(time_spent=sum(duration))%>%
arrange(desc(time_spent))
tyme%>%
group_by(project)%>%
summarise(time_spent=sum(duration))%>%
arrange(desc(time_spent))
x <-
c("tidyverse",
"tidytext",
"knitr",
"lubridate")
lapply(x, require, character.only = TRUE)
opts_chunk$set(echo = TRUE,warning = FALSE,message = FALSE)
options(knitr.table.format = "latex")
moodnotes <- read_csv("moodnotes.csv")
glimpse(moodnotes)
moodnotes$Created <- dmy_hm(moodnotes$Created)
moodnotes <- moodnotes%>%
dplyr::select(Created,
Incident,
Thoughts,
Rethink,
Mood,
`Mood value`,
`Thought distortions`
)%>%
mutate(Month=month(Created),
Day=day(Created))
#moodnotes <- na.omit(moodnotes)
glimpse(moodnotes)
x <-
c("tidyverse",
"tidytext",
"knitr",
"lubridate")
lapply(x, require, character.only = TRUE)
opts_chunk$set(echo = TRUE,warning = FALSE,message = FALSE)
options(knitr.table.format = "latex")
moodnotes <- read_csv("moodnotes.csv")
glimpse(moodnotes)
moodnotes$Created <- dmy_hm(moodnotes$Created)
moodnotes <- moodnotes%>%
dplyr::select(Created,
Incident,
Thoughts,
Rethink,
Mood,
`Mood value`,
`Thought distortions`
)%>%
mutate(Month=month(Created),
Day=day(Created))
#moodnotes <- na.omit(moodnotes)
glimpse(moodnotes)
# Pipe the moodnotes data frame to the next line
na.omit(moodnotes) %>%
# Use count to find out how many titles/types there are
dplyr::count(`Thought distortions`, sort = TRUE)
tidy_moodnotes <- na.omit(moodnotes) %>%
# Transform the non-tidy text data to tidy text data
tidytext::unnest_tokens(word, Thoughts) %>%
dplyr::ungroup()
# Pipe the tidy moodnotes data frame to the next line
tidy_moodnotes %>%
# Use count to find out how many times each word is used
dplyr::count(word,sort=TRUE)
moodnotes_bing <- tidy_moodnotes %>%
# Implement sentiment analysis with the "bing" lexicon
inner_join(get_sentiments("bing"))
moodnotes_bing %>%
# Find how many positive/negative words each play has
dplyr::count(`Thought distortions`,sentiment,word,sort = TRUE)
moodnotes_bing %>%
dplyr::count(word,sentiment)%>%
# Find the total number of words in log
dplyr::mutate(total = sum(n),
# Calculate the number of words divided by the total
percent = n/total) %>%
# Filter the results for only negative sentiment
dplyr::filter(sentiment=="negative") %>%
arrange(desc(percent))
moodnotes_bing %>%
dplyr::count(word,sentiment)%>%
# Find the total number of words in log
dplyr::mutate(total = sum(n),
# Calculate the number of words divided by the total
percent = n/total) %>%
# Filter the results for only positive sentiment
dplyr::filter(sentiment=="positive") %>%
arrange(desc(percent))
moodnotes_nrc<-tidy_moodnotes %>%
# Implement sentiment analysis using the "bing" lexicon
inner_join(get_sentiments("nrc"))%>%
dplyr::count(sentiment,word,sort = TRUE)
sadness_words <- moodnotes_nrc %>%
# Filter to choose only words associated with sadness
dplyr::filter(sentiment=="sadness") %>%
# Group by word
group_by(word) %>%
# Arrange to sort in order of descending frequency
arrange(desc(n))%>%
ungroup()
sadness_words %>%
top_n(20) %>%
mutate(word = reorder(word, n)) %>%
# Use aes() to put words on the x-axis and frequency on the y-axis
ggplot(aes(x=word,y=n)) +
# Make a bar chart with geom_col()
geom_col() +
coord_flip()
anticipation_words <- moodnotes_nrc %>%
# Filter to choose only words associated with anticipation
filter(sentiment=="anticipation") %>%
# Group by word
group_by(word) %>%
# Arrange to sort in order of descending frequency
arrange(desc(n))%>%
ungroup()
anticipation_words %>%
top_n(20) %>%
mutate(word = reorder(word, n)) %>%
# Use aes() to put words on the x-axis and frequency on the y-axis
ggplot(aes(x=word,y=n)) +
# Make a bar chart with geom_col()
geom_col() +
coord_flip()
joy_words <- moodnotes_nrc %>%
# Filter to choose only words associated with joy
filter(sentiment=="joy") %>%
# Group by word
group_by(word) %>%
# Arrange to sort in order of descending frequency
arrange(desc(n))%>%
ungroup()
joy_words %>%
top_n(20) %>%
mutate(word = reorder(word, n)) %>%
filter(word!="victor")%>%
# Use aes() to put words on the x-axis and frequency on the y-axis
ggplot(aes(x=word,y=n)) +
# Make a bar chart with geom_col()
geom_col() +
coord_flip()
anger_words <- moodnotes_nrc %>%
# Filter to choose only words associated with anger
filter(sentiment=="anger") %>%
# Group by word
group_by(word) %>%
# Arrange to sort in order of descending frequency
arrange(desc(n))%>%
ungroup()
anger_words %>%
top_n(20) %>%
mutate(word = reorder(word, n)) %>%
# Use aes() to put words on the x-axis and frequency on the y-axis
ggplot(aes(x=word,y=n)) +
# Make a bar chart with geom_col()
geom_col() +
coord_flip()
word_counts <- tidy_moodnotes %>%
# Implement sentiment analysis using the "bing" lexicon
inner_join(get_sentiments("bing")) %>%
# Count by word and sentiment
dplyr::count(word,sentiment)
top_words <- word_counts %>%
# Group by sentiment
group_by(sentiment) %>%
# Take the top 10 for each sentiment
top_n(10) %>%
ungroup() %>%
# Make word a factor in order of n
mutate(word = reorder(word, n))
# Use aes() to put words on the x-axis and n on the y-axis
ggplot(top_words, aes(x=word, y=n, fill = sentiment)) +
# Make a bar chart with geom_col()
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free") +
coord_flip()
tidy_moodnotes %>%
# Count by title and word
dplyr::count(`Thought distortions`,word,sort=TRUE)%>%
# Implement sentiment analysis using the "afinn" lexicon
inner_join(get_sentiments("afinn")) %>%
arrange(desc(n))
sentiment_contributions_pos <- tidy_moodnotes %>%
# Count by title and word
dplyr::count(`Thought distortions`,word,sort=TRUE)%>%
# Implement sentiment analysis using the "afinn" lexicon
inner_join(get_sentiments("afinn")) %>%
# Group by title
group_by(`Thought distortions`) %>%
# Calculate a contribution for each word in each title
mutate(contribution = score*n/sum(n)) %>%
ungroup()%>%
arrange(desc(contribution))
sentiment_contributions_neg <- tidy_moodnotes %>%
# Count by title and word
dplyr::count(`Thought distortions`,word,sort=TRUE)%>%
# Implement sentiment analysis using the "afinn" lexicon
inner_join(get_sentiments("afinn")) %>%
# Group by title
group_by(`Thought distortions`) %>%
# Calculate a contribution for each word in each title
mutate(contribution = score*n/sum(n)) %>%
ungroup()%>%
arrange(contribution)
sentiment_contributions_pos
sentiment_contributions_neg
tidy_moodnotes %>%
inner_join(get_sentiments("bing")) %>%
mutate(date = floor_date(Created, unit = "1 month")) %>%
dplyr::count(sentiment,Mood,date,`Thought distortions`) %>%
# Spread sentiment and n across multiple columns
spread(sentiment, n, fill = 0) %>%
# Use mutate to find net sentiment
mutate(sentiment = positive - negative)%>%
# Put index on x-axis, sentiment on y-axis, and map comedy/tragedy to fill
ggplot(aes(x=date,y=sentiment,fill=Mood)) +
# Make a bar chart with geom_col()
geom_col() +
# Separate panels for each title with facet_wrap()
facet_wrap(~`Thought distortions`,scales = "free_x")
tidy_moodnotes %>%
anti_join(stop_words) %>%
# Count by word with sort = TRUE
dplyr::count(word,sort=TRUE)
tidy_moodnotes %>%
inner_join(get_sentiments("nrc")) %>%
dplyr::count(sentiment,word) %>%
dplyr::filter(word!="victor")%>%
# Group by sentiment
group_by(sentiment) %>%
# Take the top 10 words for each sentiment
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
# Set up the plot with aes()
ggplot(aes(x=word,y=n,fill=sentiment )) +
geom_col(show.legend = FALSE) +
facet_wrap(~ sentiment, scales = "free") +
coord_flip()
sentiment_by_time <- tidy_moodnotes %>%
# Define a new column using floor_date()
mutate(date = floor_date(Created, unit = "1 month")) %>%
# Group by Day
group_by(date) %>%
mutate(total_words = n()) %>%
ungroup() %>%
# Implement sentiment analysis using the NRC lexicon
inner_join(get_sentiments("nrc"))
sentiment_by_time %>%
# Filter for positive and negative words
dplyr::filter(sentiment %in% c("positive", "negative")) %>%
# Count by date, sentiment, and total_words
dplyr::count(date,sentiment,total_words) %>%
ungroup() %>%
mutate(percent = n / total_words) %>%
# Set up the plot with aes()
ggplot(aes(x=date,y=percent,color=sentiment)) +
geom_line(size = 1.5) +
geom_smooth(method = "lm", se = FALSE, lty = 2) +
expand_limits(y = 0)
# tidy_moodnotes %>%
#     # Define a new column that rounds each date to the nearest 1 month
#     mutate(date = floor_date(Created, unit="1 month")) %>%
#     filter(word %in% c("jeroen", "food", "lonely",
#                        "bloated", "victor", "tim")) %>%
#     # Count by date and word
#     dplyr::count(date,word) %>%
#     ungroup() %>%
#     # Set up your plot with aes()
#     ggplot(aes(x=date,y=n,color=word)) +
#     # Make facets by word
#     facet_wrap(~word) +
#     geom_line(size = 1.5, show.legend = FALSE) +
#     expand_limits(y = 0)
