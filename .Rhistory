)+theme(legend.position = "top",
text = element_text(size=20)) -> upper_costs_plot
costs_combined_total<- arrangeGrob(lower_costs_plot,upper_costs_plot, nrow=2)
ggsave("costs_combined_total.png",
costs_combined_total,
width = 14,
height= 16,
limitsize = FALSE,
bg="transparent")
# Chunk 36: SCC table
PV <- future_value(USD,real_rate = real_rate,periods = (year(Sys.Date())-Date))
Source <- as.vector(c("IAWG, 2016","van den Bergh \\& Botzen, 2014"))
SCC_table <- data_frame(Source,USD,Date,EUR,PV)
SCC_table%>%
set_names(c("Source","USD","Published date","EUR", "Present value"))%>%
kable(
caption = "\\label{tab:scc}Social cost of carbon dioxide per tonne.",
booktabs = T,
escape = F) %>%
kable_styling(latex_options = c("hold_position"))
# Chunk 37: carbon sequestration benefits
#Constants
net_carbon <- 0.000191 #Define the net carbon sequestration capacity per tree (tonnes/tree)
SCC_carbon_upper <-SCC_table$PV[2] #Define the upper social cost of carbon per one tonne (euros)
SCC_carbon_lower <- SCC_table$PV[1] #Define the upper social cost of carbon per one tonne (euros)
date_lower <- df_date %>%
filter(run==low_run)%>%
mutate(total=sHeal+sInf+sTre)
date_upper <- df_date %>%
filter(run==high_run)%>%
mutate(total=sHeal+sInf+sTre)
canary_lower <- df_canary %>%
filter(run==low_run)%>%
mutate(total=sHeal+sInf+sTre)
canary_upper <- df_canary %>%
filter(run==high_run)%>%
mutate(total=sHeal+sInf+sTre)
carbon_lower_date <- date_lower$total*SCC_carbon_lower*net_carbon
carbon_lower_date <-future_value(carbon_lower_date,
real_rate = real_rate,
periods = (year(Sys.Date())-time))
carbon_upper_date <- date_upper$total*SCC_carbon_upper*net_carbon
carbon_upper_date <-future_value(carbon_upper_date,
real_rate = real_rate,
periods = (year(Sys.Date())-time))
carbon_lower_canary <- canary_lower$total*SCC_carbon_lower*net_carbon
carbon_lower_canary <-future_value(carbon_lower_canary,
real_rate = real_rate,
periods = (year(Sys.Date())-time))
carbon_upper_canary <- canary_upper$total*SCC_carbon_upper*net_carbon
carbon_upper_canary <-future_value(carbon_upper_canary,
real_rate = real_rate,
periods = (year(Sys.Date())-time))
carbon_benefits <- data.frame(time,
carbon_lower_date,
carbon_upper_date,
carbon_lower_canary,
carbon_upper_canary)
carbon_benefits <- carbon_benefits%>%
mutate(total_lower=carbon_lower_date+carbon_lower_canary,
total_upper=carbon_upper_date+carbon_upper_canary)%>%
dplyr::select(time,carbon_lower_date,carbon_lower_canary,total_lower,
carbon_upper_date,carbon_upper_canary,total_upper)
# Chunk 38: read-idealista-data
idealista <- read.xlsx("idealista_data.xlsx")
#See idealista structure
glimpse(idealista)
#is.numeric returns TRUE if the variable is numeric.
#sapply iterates and returns a vector.
#Which gives the indices that were TRUE
num_var <- which(sapply(idealista, is.numeric))
#Count how many variables are numeric
length_num_var <- length(num_var)
#Return a vector with character variables
cat_var <- which(sapply(idealista, is.character))
#Count how many variables are characters
length_car_var <- length(cat_var)
#Change geonames
names(idealista)[names(idealista) == "LEVEL3NAME"] <- "PROVINCE"
names(idealista)[names(idealista) == "LEVEL4NAME"] <- "COMARCA"
names(idealista)[names(idealista) == "LEVEL5NAME"] <- "UNKNOWN"
names(idealista)[names(idealista) == "LEVEL6NAME"] <- "MUNICIPALITY"
# Chunk 50: read counts
palms_read_1 <- read.xlsx("idealista_1.xlsx")
palms_read_2 <- read.xlsx("idealista_2.xlsx")
palms_read_3 <- read.xlsx("idealista_3.xlsx")
palms_read_4 <- read.xlsx("idealista_4.xlsx")
palms_read_5 <- read.xlsx("idealista_5.xlsx")
palms_read_3$n_date <- as.numeric(palms_read_3$n_date)
idealista_read <- rbind(palms_read_1,
palms_read_2,
palms_read_3,
palms_read_4,
palms_read_5)
idealista_read$n_date[is.na(idealista_read$n_date)] <- 0
idealista_read$n_canary[is.na(idealista_read$n_canary)] <- 0
idealista_read <- idealista_read %>%
dplyr::select(-ADDRESS,
-PROPERTYCOMMENT,
-CLEANSTREETNAME,
-STREETNUMBER,
-POSTALCODE,
-UNKNOWN,
-LEVEL2NAME,
-ADTYPOLOGYID,
-PROPERTYTYPEID,
-ADOPERATIONID,
-BUILTTYPEID,
-PROVINCE,
-COMARCA,
-MUNICIPALITY,
-ENERGYCERTIFICATIONID)
idealista_factors <- idealista_read %>%
select_if(is.character)%>%
mutate_all(as.factor)
idealista_clean <- idealista_read%>%
select_if(is.numeric)%>%
cbind(idealista_factors)
# Chunk 51: initial data skim
skim(idealista_clean)
# Chunk 52: remove_outliers
idealista_clean <- idealista_clean%>%
filter(PRICE<1500000,
PLOTOFLAND<1000,
CONSTRUCTEDAREA<500,
BATHNUMBER<10,
ROOMNUMBER<10,
BUILDINGFLOORS<5)
# Chunk 53: skim clean dataset
skim(idealista_clean)
# Chunk 54: initial fit model
#Create a model for all variables
fit <- lm(PRICE~., data = idealista_clean, na.action = "na.fail")
tidy(anova(fit))%>%
arrange(p.value)%>%
filter(p.value<0.05)%>%
dplyr::select(term, statistic, p.value)
# Chunk 55: chosen fit
chosen_fit <- lm(PRICE~CONSTRUCTEDAREA+
BATHNUMBER+
HASSWIMMINGPOOL+
HASGARDEN+
ROOMNUMBER+
HASWARDROBE+
PLOTOFLAND+
CHALETTYPEID+
HASTERRACE+
CONSTRUCTIONYEAR
, data = idealista_clean, na.action = "na.fail")
# Chunk 57: read_models
#Read models
all_models <- readRDS("all_models")
nrow(all_models)
# Chunk 58: numeric variables plot
#select significant variables
high_cor_vars <- idealista_clean%>%
dplyr::select(CONSTRUCTEDAREA,
PLOTOFLAND,
CONSTRUCTIONYEAR)
#Create name list of high_cor_vars
names_high_cor_vars <- names(high_cor_vars)
#For each variable that is highly correlated
for (var in names_high_cor_vars){
#ggplot with the dataframe with values
plot <- ggplot(high_cor_vars, aes_string(x=var, y=idealista_clean$PRICE))+
#geom_point to see distribution
geom_jitter(alpha=0.1)+
#Add labels
labs(title=paste("Asking price vs.",var),
x=var,
y="Asking price")+
theme_minimal()+
#Add neat scales for price
scale_y_continuous(breaks= seq(0, 1000000, by=100000),
labels = comma)
#Print the plot after each loop
print(plot)
}
# Chunk 59: categorical variables plot
#Save column names
cols <- c("BATHNUMBER",
"HASGARDEN",
"HASSWIMMINGPOOL",
"HASWARDROBE")
#Convert OverallQual, FullBath and TotRmsAbvGrd to a factor
high_cor_vars[cols] <- lapply(idealista_clean[cols], factor)
#Select significant numeric values
high_cor_vars_fact <- high_cor_vars%>%
dplyr::select(cols)
#Create name list of high_cor_vars
names_high_cor_vars_fact <- names(high_cor_vars_fact)
#For each variable that is highly correlated
for (var in names_high_cor_vars_fact){
#ggplot with the dataframe with values
plot <- ggplot(high_cor_vars_fact, aes_string(x=var, y=idealista_clean$PRICE))+
#geom_point to see distribution
geom_boxplot(alpha=0.1)+
#Add labels
labs(title=paste("Asking price vs.",var),
x=var,
y="Asking price") + theme_minimal() +
#Add neat scales for price
scale_y_continuous(breaks= seq(0, 1000000, by=100000),
labels = comma)
#Print the plot after each loop
print(plot)
}
# Chunk 60: total costs summary
total_costs %>%
mutate(total_lower=gov_cost_present+lower_date+lower_canary,
total_upper=gov_cost_present+upper_date+upper_canary) -> total_costs
carbon_benefits%>%
mutate(total_lower=  carbon_lower_date+carbon_lower_canary,
total_upper=carbon_lower_canary+carbon_upper_canary) -> total_benefits
# Chunk 61: costs and benefits summary
cb_lower <- data.frame(time, total_costs$total_lower,total_benefits$total_lower)
names(cb_lower) <- c("time","costs","benefits")
cb_upper <- data.frame(time, total_costs$total_upper,total_benefits$total_lower)
names(cb_upper) <- c("time","costs","benefits")
cb_lower%>%
summarise(sum(costs),sum(benefits)) ->cb_total_lower
cb_upper%>%
summarise(sum(costs),sum(benefits))->cb_total_upper
# Chunk 62: cost benefits plotted
cb_lower %>%
mutate(costs=costs/1000)%>%
gather(key = "type",value="amount",2:3)%>%
ggplot(aes(x=time,
y=amount,
color=type))+
geom_area(aes(fill=type),
position = "dodge",
alpha=0.5,linetype="dashed",size=1 )+
theme_classic()+
scale_x_continuous(breaks = int_breaks)+
guides( color = FALSE,
fill = guide_legend(title = ""))+
scale_fill_manual(values=c("#00BA38","#F8766D"))+
scale_color_manual(values=c("#00BA38","#F8766D"))+
labs(
title = "Costs vs. benefits (lower bound)",
subtitle = "Costs were divided by 1,000 to allow benefits to appear in the plot.",
x = "Time",
y = "Euros")+
theme(legend.position = "top")-> cb_lower_plot
cb_upper %>%
mutate(costs=costs/1000)%>%
gather(key = "type",value="amount",2:3)%>%
ggplot(aes(x=time,
y=amount,
color=type))+
geom_area(aes(fill=type),
position = "dodge",
alpha=0.5,linetype="dashed",size=1 )+
theme_classic()+
scale_fill_manual(values=c("#00BA38","#F8766D"))+
scale_color_manual(values=c("#00BA38","#F8766D"))+
scale_x_continuous(breaks = int_breaks)+
guides( color = FALSE,
fill = guide_legend(title = ""))+
labs(
title = "Costs vs. benefits (upper bound)",
subtitle = "Costs were divided by 1,000 to allow benefits to appear in the plot.",
x = "Time",
y = "Euros"
)+theme(legend.position = "top",
text=element_text(size=10)) -> cb_upper_plot
cost_benefit_plot<- arrangeGrob(cb_lower_plot,cb_upper_plot, nrow=2)
ggsave("cost_benefit_plot.png",
cost_benefit_plot,
width = 8,
height= 8,
limitsize = FALSE,
bg="transparent")
# Chunk 63: NSB
nsb_low <- round(sum(carbon_benefits$total_lower)-sum(total_costs$total_lower),digits = 0)
nsb_ratio_low  <- round(sum(total_costs$total_lower)/sum(carbon_benefits$total_lower),digits=0)
nsb_high <- round(sum(carbon_benefits$total_upper)-sum(total_costs$total_upper),digits=0)
nsb_ratio_high <- round(sum(total_costs$total_upper)/sum(carbon_benefits$total_upper),digits=0)
# Chunk 64: stock table summary
Summary_Stock <- as.vector(c("Healthy","Infested","In treatment","Lost","Replanted","Total population"))
Stock <- as.vector(c("$S_t^H$","$S_t^I$","$S_t^{T}$","$S_t^L$","$S_t^R$","$S_t$"))
df_stock <- as_tibble(Stock,Summary_Stock)
colnames(df_stock) <- c("Stock")
kable(df_stock, caption = "\\label{tab:stocks}Palm tree stocks.", booktabs = T,escape = T) %>%
kable_styling(latex_options = c("hold_position"))
# Chunk 65: flows table summary
Summary_Flow <- as.vector(c("Replanted",
"Failed prevention",
"Untreated",
"Treated",
"Failed treatment",
"Successful treatment"))
Flow <- as.vector(c("$F_{t,t-1}^R$",
"$F_{t,t-1}^{FP}$",
"$F_{t,t-1}^{UTR}$",
"$F_{t,t-1}^{TR}$",
"$F_{t,t-1}^{FT}$",
"$F_{t,t-1}^{ST}$"
))
df_flow <- as_tibble(Flow,Summary_Flow)
colnames(df_flow) <- c("Flow")
kable(df_flow, caption = "\\label{tab:flows}Palm tree flows.", booktabs = T,escape = F) %>%
kable_styling(latex_options = c("hold_position"))
# Chunk 66: gencat cost tables
gencat%>%
set_names(c("Year","GENCAT cost","GENCAT cost present"))%>%
kable(
caption = "\\label{tab:gencat_table}GENCAT costs associated to RPW expenditure over time.",
booktabs = T,
escape = F,
linesep= ""
) %>%
kable_styling(latex_options = c("hold_position"))%>%
footnote(general= paste0("Total cost of the evaluated policies for all years is ",
round(sum(gencat$gov_cost_present),digits = 0),
"."," Source: GENCAT, 2018."),
footnote_as_chunk = T, threeparttable = TRUE)
# Chunk 67: date_cost_low table
date_cost_low%>%
set_names(c("Year","Replanting","Inspection","Prevention","Treatment","Removal","Total"))%>%
kable(
caption = "\\label{tab:date_costs_low}Management costs (lower bound) for date palms over time.",
booktabs = T,
escape = F,
linesep= ""
) %>%
kable_styling(latex_options = c("hold_position"))%>%
footnote(general=paste("Total cost of all activities for all years is ",round(sum(date_cost_low$total),digits = 0),".",sep = ""),
footnote_as_chunk = T, threeparttable = TRUE)
# Chunk 68: date_cost_high table
date_cost_high%>%
set_names(c("Year","Replanting","Inspection","Prevention","Treatment","Removal","Total"))%>%
kable(
caption = "\\label{tab:date_costs_high}Management costs (upper bound) for date palms over time.",
booktabs = T,
escape = F,
linesep= ""
) %>%
kable_styling(latex_options = c("hold_position"))%>%
footnote(general=paste("Total cost of all activities for all years is ",round(sum(date_cost_high$total),digits = 0),".",sep = ""),
footnote_as_chunk = T, threeparttable = TRUE)
# Chunk 69: canary_cost_low table
canary_cost_low%>%
set_names(c("Year","Replanting","Inspection","Prevention","Treatment","Removal","Total"))%>%
kable(
caption = "\\label{tab:canary_costs_low}Management costs (lower bound) for canary palms over time.",
booktabs = T,
escape = F,
linesep= ""
) %>%
kable_styling(latex_options = c("hold_position"))%>%
footnote(general=paste("Total cost of all activities for all years is ",round(sum(canary_cost_low$total),digits = 0),".",sep = ""), footnote_as_chunk = T, threeparttable = TRUE)
# Chunk 70: canary_cost_high table
canary_cost_high%>%
set_names(c("Year","Replanting","Inspection","Prevention","Treatment","Removal","Total"))%>%
kable(
caption = "\\label{tab:canary_costs_high}Management costs (upper bound) for canary palms over time.",
booktabs = T,
escape = F,
linesep= ""
) %>%
kable_styling(latex_options = c("hold_position"))%>%
footnote(general=paste("Total cost of all activities for all years is ",round(sum(canary_cost_high$total),digits = 0),".",sep = ""), footnote_as_chunk = T, threeparttable = TRUE)
# Chunk 71: total costs table
total_costs%>%
set_names(c("Year","GENCAT","Date","Canary","Total","Date","Canary","Total"))%>%
kable(
caption = "\\label{tab:total_costs}Total costs for canary and date palms over time.",
booktabs = T,
escape = F,
linesep= "") %>%
kable_styling(latex_options = c("hold_position"))%>%
add_header_above(c("","","Lower"=3,"Higher"=3))%>%
footnote(general=paste("Total for lower bound is ",round(sum(total_costs$total_lower),digits=0),", total for higher bound is ",round(sum(total_costs$total_upper),digits=0),".",sep = ""), footnote_as_chunk = T, threeparttable = TRUE)
# Chunk 72: carbon benefits table
carbon_benefits%>%
set_names(c("Year","Date","Canary","Total","Date","Canary","Total"))%>%
kable(
caption = "\\label{tab:carbon_costs}Carbon sequestration values over time.",
booktabs = T,
escape = F,
linesep= ""
) %>%
kable_styling(latex_options = c("hold_position"))%>%
add_header_above(c("","Lower"=3,"Higher"=3))%>%
footnote(general=
paste0("Combining the totals for all years for both species yields a lower bound of ",
round(sum(carbon_benefits$total_lower),digits=0)," and a higher bound of ",
round(sum(carbon_benefits$total_upper),digits=0),"."),
footnote_as_chunk = T, threeparttable = TRUE)
\\label{tab:unitary_costs}Unitary costs for management activities.
kableExtra_latex_packages()
?kableExtra_latex_packages
options()
install.packages("pander")
str(idealista_clean)
palms_read_1 <- read.xlsx("idealista_1.xlsx")
palms_read_2 <- read.xlsx("idealista_2.xlsx")
palms_read_3 <- read.xlsx("idealista_3.xlsx")
palms_read_4 <- read.xlsx("idealista_4.xlsx")
palms_read_5 <- read.xlsx("idealista_5.xlsx")
palms_read_3$n_date <- as.numeric(palms_read_3$n_date)
idealista_read <- rbind(palms_read_1,
palms_read_2,
palms_read_3,
palms_read_4,
palms_read_5)
idealista_read$n_date[is.na(idealista_read$n_date)] <- 0
idealista_read$n_canary[is.na(idealista_read$n_canary)] <- 0
idealista_read <- idealista_read %>%
dplyr::select(-ADDRESS,
-PROPERTYCOMMENT,
-CLEANSTREETNAME,
-STREETNUMBER,
-POSTALCODE,
-UNKNOWN,
-LEVEL2NAME,
-ADTYPOLOGYID,
-PROPERTYTYPEID,
-ADOPERATIONID,
-BUILTTYPEID,
-MUNICIPALITY,
-ENERGYCERTIFICATIONID)
idealista_factors <- idealista_read %>%
select_if(is.character)%>%
mutate_all(as.factor)
idealista_read <- idealista_read%>%
select_if(is.numeric)%>%
cbind(idealista_factors)
idealista_clean <- idealista_read%>%
dplyr::select(-COMARCA,
-PROVINCE)%>%
filter(PRICE<1500000,
PLOTOFLAND<1000,
CONSTRUCTEDAREA<500,
BATHNUMBER<10,
ROOMNUMBER<10,
BUILDINGFLOORS<5)
skim(idealista_clean)
girona_clean <- idealista_read%>%
filter(PROVINCE=="Girona")%>%
dplyr::select(-COMARCA)
fit_girona <- lm(PRICE~CONSTRUCTEDAREA+
PLOTOFLAND+
CONSTRUCTIONYEAR+
BATHNUMBER+
HASGARDEN+
HASSWIMMINGPOOL+
HASWARDROBE, data=girona_clean)
summary(fit_girona)
skim(girona_clean)
girona_clean <- idealista_read%>%
filter(PROVINCE=="Girona")%>%
dplyr::select(-COMARCA)%>%
filter(PRICE<1500000,
PLOTOFLAND<1000,
CONSTRUCTEDAREA<500,
BATHNUMBER<10,
ROOMNUMBER<10,
BUILDINGFLOORS<5)
fit_girona <- lm(PRICE~CONSTRUCTEDAREA+
PLOTOFLAND+
CONSTRUCTIONYEAR+
BATHNUMBER+
HASGARDEN+
HASSWIMMINGPOOL+
HASWARDROBE, data=girona_clean)
anova(fit_girona)
skim(idealista_girona)
skim(girona_clean)
fit_girona <- lm(PRICE~ ., data=girona_clean)
fit_girona <- lm(PRICE~ ., data=girona_clean)
girona_clean <- idealista_read%>%
filter(PROVINCE=="Girona")%>%
dplyr::select(-COMARCA,
-CHALETTYPEID,
-PROVINCE)%>%
filter(PRICE<1500000,
PLOTOFLAND<1000,
CONSTRUCTEDAREA<500,
BATHNUMBER<10,
ROOMNUMBER<10,
BUILDINGFLOORS<5)
fit_girona <- lm(PRICE~ , data=girona_clean)
fit_girona <- lm(PRICE~ ., data=girona_clean)
anova(fit_girona)
skim(girona_clean)
install.packages("DataExplorer")
library(DataExplorer)
create_report(girona_clean)
library(formattable)
formattable(summary(fit))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(openxlsx)
library(lubridate)
library(anytime)
EPSI<-read.xlsx("ed_progress.xlsx",sheet = 1)
EDEQ<-read.xlsx("ed_progress.xlsx",sheet = 2)
EPSI$date <- parse_date_time(EPSI$date,orders = "ym0")
EDEQ$date <- parse_date_time(EDEQ$date,orders = "ym0")
EPSI%>%
gather(key=type,value="score",2:7)%>%
ggplot(aes(x=date,y=score,group=type,color=type))+
geom_line(alpha=0.5, size=2)+theme_classic()+
theme(axis.text.x = element_text(angle=90,hjust=1))
EDEQ %>%
gather(key=type,value="score",2:6)%>%
ggplot(aes(x=date,y=score,group=type,color=type))+
geom_line(size=2, alpha=0.5)+theme_classic()+
theme(axis.text.x = element_text(angle=90,hjust=1))
