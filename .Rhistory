col.names = c("Variable","Correlation")) %>%
#Style table
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
#Make a simple model
simple_model <- lm(SalePrice ~ OverallQual + GrLivArea + GarageCars + GarageArea + TotalBsmtSF + X1stFlrSF + FullBath +BsmtQualEx+ TotRmsAbvGrd + YearBuilt + YearRemodAdd+KitchenQualEx+KitchenQualTA+ExterQualTA, data = homes_num)
#Checking for multicolinearity
vif(simple_model)
#Make a corrected_model
corrected_model <- lm(SalePrice ~ OverallQual + GarageArea + TotalBsmtSF + X1stFlrSF + FullBath +BsmtQualEx+ TotRmsAbvGrd + YearBuilt + YearRemodAdd+KitchenQualEx+KitchenQualTA+ExterQualTA, data = homes_num)
#Checking for multicolinearity
vif(corrected_model)
#Select significant variables
high_cor_vars <- homes_num%>%
dplyr::select(OverallQual,
GarageArea,
TotalBsmtSF,
X1stFlrSF,
FullBath,
BsmtQualEx,
TotRmsAbvGrd,
YearBuilt,
YearRemodAdd,
KitchenQualEx,
KitchenQualTA,
ExterQualTA)
#Create name list of high_cor_vars
names_high_cor_vars <- names(high_cor_vars)
#For each variable that is highly correlated
for (var in names_high_cor_vars){
#ggplot with the dataframe with values
plot <- ggplot(high_cor_vars, aes_string(x=var, y=homes_num$SalePrice))+
#geom_point to see distribution
geom_jitter(alpha=0.1)+
#Add labels
labs(title=paste("Sales price vs.",var),
x=var,
y="Sales price")+ theme_minimal()+
#Add neat scales for price
scale_y_continuous(breaks= seq(0, 800000, by=100000),
labels = comma)
#Print the plot after each loop
print(plot)
}
#Save column names
cols <- c("OverallQual", "FullBath", "TotRmsAbvGrd")
#Convert OverallQual, FullBath and TotRmsAbvGrd to a factor
high_cor_vars[cols] <- lapply(high_cor_vars[cols], factor)
#Select significant numeric values
high_cor_vars_fact <- high_cor_vars%>%
dplyr::select(OverallQual,
FullBath,
TotRmsAbvGrd)
#Create name list of high_cor_vars
names_high_cor_vars_fact <- names(high_cor_vars_fact)
#For each variable that is highly correlated
for (var in names_high_cor_vars_fact){
#ggplot with the dataframe with values
plot <- ggplot(high_cor_vars_fact, aes_string(x=var, y=homes_num$SalePrice))+
#geom_point to see distribution
geom_boxplot(alpha=0.1)+
#Add labels
labs(title=paste("Sales price vs.",var),
x=var,
y="Sales price") + theme_minimal() +
#Add neat scales for price
scale_y_continuous(breaks= seq(0, 800000, by=100000),
labels = comma)
#Print the plot after each loop
print(plot)
}
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
x <-
c("tidyverse",
"knitr",
"formatR",
"stringr",
"quantmode",
"skimr",
"lubridate",
"tidyr",
"formattable",
"grid",
"gridExtra",
"kableExtra",
"here",
"corrplot",
"rms",
"dummies")
lapply(x, require, character.only = TRUE)
opts_chunk$set(echo = FALSE,
warning = FALSE,
error = FALSE,
message = FALSE,
collapse= TRUE,
comment = NA,
tidy = TRUE)
#Clear Global Environment
rm(list = ls())
path <- "/Volumes/TOSHIBAEXT/RStudio/blog/content/post/house_prices/"
#Read `train.csv` as homes
homes <- read.csv(paste0(path,"train.csv"), stringsAsFactors = TRUE)
#Get a glimpse of homes
glimpse(homes)
#is.numeric returns TRUE if the variable is numeric.
#sapply iterates and returns a vector.
#Which gives the indices that were TRUE
num_var <- which(sapply(homes, is.numeric))
#Count how many variables are numeric
length(num_var)
#Return a vector with categorical variables
cat_var <- which(sapply(homes, is.factor))
#Count how many variables are categorical
length(cat_var)
#Select categorical variables
cat_var_values <- homes%>%
select(names(cat_var))
#Dummify categorical values
dummy_cat_var <- dummy.data.frame(cat_var_values)
#Select numeric
cor_num<-homes%>%
#Select only numeric variables
select_if(is.numeric)%>%
#Remove the Id variable
dplyr::select(-Id)
#Bind cor_num with dummy_cat_var creating homes_num
homes_num <- cbind.data.frame(cor_num,dummy_cat_var)
complete_cor <- homes_num%>%
#Compute correlation of complete observations
cor(use = "pairwise.complete.obs")
#Make the correlation matrix a tibble
complete_cor_tibble <- as.tibble(as.table(complete_cor))
complete_cor_tibble %>%
#Sort the tibble by descending correlations
arrange(desc(n))%>%
#Filter variables that have an absolute value correlation higher than 0.5 with SalePrice
filter(Var1=="SalePrice"&abs(n)>0.5&Var2!="SalePrice")%>%
#Select variable and correlation
dplyr::select(Var2,n)%>%
#Make table
kable(caption="Top 14 correlations with SalePrice",
#Add column names
col.names = c("Variable","Correlation")) %>%
#Style table
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
#Make a simple model
simple_model <- lm(SalePrice ~ OverallQual + GrLivArea + GarageCars + GarageArea + TotalBsmtSF + X1stFlrSF + FullBath +BsmtQualEx+ TotRmsAbvGrd + YearBuilt + YearRemodAdd+KitchenQualEx+KitchenQualTA+ExterQualTA, data = homes_num)
#Checking for multicolinearity
vif(simple_model)
#Make a corrected_model
corrected_model <- lm(SalePrice ~ OverallQual + GarageArea + TotalBsmtSF + X1stFlrSF + FullBath +BsmtQualEx+ TotRmsAbvGrd + YearBuilt + YearRemodAdd+KitchenQualEx+KitchenQualTA+ExterQualTA, data = homes_num)
#Checking for multicolinearity
vif(corrected_model)
#Select significant variables
high_cor_vars <- homes_num%>%
dplyr::select(OverallQual,
GarageArea,
TotalBsmtSF,
X1stFlrSF,
FullBath,
BsmtQualEx,
TotRmsAbvGrd,
YearBuilt,
YearRemodAdd,
KitchenQualEx,
KitchenQualTA,
ExterQualTA)
#Create name list of high_cor_vars
names_high_cor_vars <- names(high_cor_vars)
#For each variable that is highly correlated
for (var in names_high_cor_vars){
#ggplot with the dataframe with values
plot <- ggplot(high_cor_vars, aes_string(x=var, y=homes_num$SalePrice))+
#geom_point to see distribution
geom_jitter(alpha=0.1)+
#Add labels
labs(title=paste("Sales price vs.",var),
x=var,
y="Sales price")+ theme_minimal()+
#Add neat scales for price
scale_y_continuous(breaks= seq(0, 800000, by=100000),
labels = comma)
#Print the plot after each loop
print(plot)
}
#Save column names
cols <- c("OverallQual", "FullBath", "TotRmsAbvGrd")
#Convert OverallQual, FullBath and TotRmsAbvGrd to a factor
high_cor_vars[cols] <- lapply(high_cor_vars[cols], factor)
#Select significant numeric values
high_cor_vars_fact <- high_cor_vars%>%
dplyr::select(OverallQual,
FullBath,
TotRmsAbvGrd)
#Create name list of high_cor_vars
names_high_cor_vars_fact <- names(high_cor_vars_fact)
#For each variable that is highly correlated
for (var in names_high_cor_vars_fact){
#ggplot with the dataframe with values
plot <- ggplot(high_cor_vars_fact, aes_string(x=var, y=homes_num$SalePrice))+
#geom_point to see distribution
geom_boxplot(alpha=0.1)+
#Add labels
labs(title=paste("Sales price vs.",var),
x=var,
y="Sales price") + theme_minimal() +
#Add neat scales for price
scale_y_continuous(breaks= seq(0, 800000, by=100000),
labels = comma)
#Print the plot after each loop
print(plot)
}
head(homes$YearBuilt)
Sys.Date()
year(Sys.Date())
homes%>%
#Mutate to create `YearsSinceBuilt`
#It will be the difference of the present year - YearBuilt
mutate(YearsSinceBuilt = year(Sys.Date())-YearBuilt)%>%
head()
homes%>%
#Mutate to create `YearsSinceBuilt`
#It will be the difference of the present year - YearBuilt
mutate(YearsSinceBuilt = year(Sys.Date())-YearBuilt)%>%
select(YearsSinceBuilt)%>%
head()
homes%>%
#Mutate to create `YearsSinceBuilt` and `YearsSinceRemod`
#It will be the difference of the present year - YearBuilt
mutate(YearsSinceBuilt = year(Sys.Date())-YearBuilt,
YearsSinceRemod = year(Sys.Date())-YearRemodAdd)%>%
select(YearsSinceRemod)%>%
head()
homes<-homes%>%
#Mutate to create `YearsSinceBuilt` and `YearsSinceRemod`
#It will be the difference of the present year - YearBuilt
mutate(YearsSinceBuilt = year(Sys.Date())-YearBuilt,
#Same for YearsSinceRemod
YearsSinceRemod = year(Sys.Date())-YearRemodAdd)
path <- "/Volumes/TOSHIBAEXT/RStudio/blog/content/post/house_prices/"
#Read `train.csv` as homes
homes <- read.csv(paste0(path,"train.csv"), stringsAsFactors = TRUE)
#is.numeric returns TRUE if the variable is numeric.
#sapply iterates and returns a vector.
#Which gives the indices that were TRUE
num_var <- which(sapply(homes, is.numeric))
#Count how many variables are numeric
length(num_var)
#Return a vector with categorical variables
cat_var <- which(sapply(homes, is.factor))
#Count how many variables are categorical
length(cat_var)
homes<-homes%>%
#Mutate to create `YearsSinceBuilt` and `YearsSinceRemod`
#It will be the difference of the present year - YearBuilt
mutate(YearsSinceBuilt = year(Sys.Date())-YearBuilt,
#Same for YearsSinceRemod
YearsSinceRemod = year(Sys.Date())-YearRemodAdd)%>%
#Remove `YearBuilt` and `YearRemodAdd`
select(-YearBuilt,
-YearRemodAdd)
glimpse(homes)
#Select categorical variables
cat_var_values <- homes%>%
select(names(cat_var))
#Dummify categorical values
dummy_cat_var <- dummy.data.frame(cat_var_values)
#Select numeric
cor_num<-homes%>%
#Select only numeric variables
select_if(is.numeric)%>%
#Remove the Id variable
dplyr::select(-Id)
#Bind cor_num with dummy_cat_var creating homes_num
homes_num <- cbind.data.frame(cor_num,dummy_cat_var)
complete_cor <- homes_num%>%
#Compute correlation of complete observations
cor(use = "pairwise.complete.obs")
#Make the correlation matrix a tibble
complete_cor_tibble <- as.tibble(as.table(complete_cor))
complete_cor_tibble %>%
#Sort the tibble by descending correlations
arrange(desc(n))%>%
#Filter variables that have an absolute value correlation higher than 0.5 with SalePrice
filter(Var1=="SalePrice"&abs(n)>0.5&Var2!="SalePrice")%>%
#Select variable and correlation
dplyr::select(Var2,n)%>%
#Make table
kable(caption="Top 14 correlations with SalePrice",
#Add column names
col.names = c("Variable","Correlation")) %>%
#Style table
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
#Make a simple model
simple_model <- lm(SalePrice ~ OverallQual + GrLivArea + GarageCars + GarageArea + TotalBsmtSF + X1stFlrSF + FullBath + BsmtQualEx + TotRmsAbvGrd + YearsSinceBuilt + YearsSinceRemod + KitchenQualEx + KitchenQualTA + ExterQualTA, data = homes_num)
#Checking for multicolinearity
vif(simple_model)
#Make a corrected_model
corrected_model <- lm(SalePrice ~ OverallQual + GarageArea + TotalBsmtSF + X1stFlrSF + FullBath +BsmtQualEx+ TotRmsAbvGrd + YearBuilt + YearRemodAdd+KitchenQualEx+KitchenQualTA+ExterQualTA, data = homes_num)
#Make a corrected_model
corrected_model <- lm(SalePrice ~ OverallQual + GarageArea + TotalBsmtSF + X1stFlrSF + FullBath + BsmtQualEx + TotRmsAbvGrd + YearsSinceBuilt + YearsSinceRemod + KitchenQualEx + KitchenQualTA + ExterQualTA, data = homes_num)
#Checking for multicolinearity
vif(corrected_model)
#Select significant variables
high_cor_vars <- homes_num%>%
dplyr::select(OverallQual,
GarageArea,
TotalBsmtSF,
X1stFlrSF,
FullBath,
BsmtQualEx,
TotRmsAbvGrd,
YearsSinceBuilt,
YearsSinceRemod,
KitchenQualEx,
KitchenQualTA,
ExterQualTA)
#Create name list of high_cor_vars
names_high_cor_vars <- names(high_cor_vars)
#For each variable that is highly correlated
for (var in names_high_cor_vars){
#ggplot with the dataframe with values
plot <- ggplot(high_cor_vars, aes_string(x=var, y=homes_num$SalePrice))+
#geom_point to see distribution
geom_jitter(alpha=0.1)+
#Add labels
labs(title=paste("Sales price vs.",var),
x=var,
y="Sales price")+ theme_minimal()+
#Add neat scales for price
scale_y_continuous(breaks= seq(0, 800000, by=100000),
labels = comma)
#Print the plot after each loop
print(plot)
}
#Save column names
cols <- c("OverallQual", "FullBath", "TotRmsAbvGrd", "BsmtQualEx", "KitchenQualEx", "KitchenQualTA", "ExterQualTA")
#Convert OverallQual, FullBath and TotRmsAbvGrd to a factor
high_cor_vars[cols] <- lapply(high_cor_vars[cols], factor)
#Select significant numeric values
high_cor_vars_fact <- high_cor_vars%>%
dplyr::select(OverallQual,
FullBath,
TotRmsAbvGrd)
#Create name list of high_cor_vars
names_high_cor_vars_fact <- names(high_cor_vars_fact)
#For each variable that is highly correlated
for (var in names_high_cor_vars_fact){
#ggplot with the dataframe with values
plot <- ggplot(high_cor_vars_fact, aes_string(x=var, y=homes_num$SalePrice))+
#geom_point to see distribution
geom_boxplot(alpha=0.1)+
#Add labels
labs(title=paste("Sales price vs.",var),
x=var,
y="Sales price") + theme_minimal() +
#Add neat scales for price
scale_y_continuous(breaks= seq(0, 800000, by=100000),
labels = comma)
#Print the plot after each loop
print(plot)
}
#Select significant numeric values
high_cor_vars_fact <- high_cor_vars%>%
dplyr::select(OverallQual,
FullBath,
TotRmsAbvGrd)
#Create name list of high_cor_vars
names_high_cor_vars_fact <- names(high_cor_vars_fact)
#For each variable that is highly correlated
for (var in names_high_cor_vars_fact){
#ggplot with the dataframe with values
plot <- ggplot(high_cor_vars_fact, aes_string(x=var, y=homes_num$SalePrice))+
#geom_point to see distribution
geom_boxplot(alpha=0.1)+
#Add labels
labs(title=paste("Sales price vs.",var),
x=var,
y="Sales price") + theme_minimal() +
#Add neat scales for price
scale_y_continuous(breaks= seq(0, 800000, by=100000),
labels = comma)
#Print the plot after each loop
print(plot)
}
#Save column names
cols <- c("OverallQual", "FullBath", "TotRmsAbvGrd", "BsmtQualEx", "KitchenQualEx", "KitchenQualTA", "ExterQualTA")
#Convert OverallQual, FullBath and TotRmsAbvGrd to a factor
high_cor_vars[cols] <- lapply(high_cor_vars[cols], factor)
#Select significant numeric values
high_cor_vars_fact <- high_cor_vars%>%
dplyr::select(cols)
#Create name list of high_cor_vars
names_high_cor_vars_fact <- names(high_cor_vars_fact)
#For each variable that is highly correlated
for (var in names_high_cor_vars_fact){
#ggplot with the dataframe with values
plot <- ggplot(high_cor_vars_fact, aes_string(x=var, y=homes_num$SalePrice))+
#geom_point to see distribution
geom_boxplot(alpha=0.1)+
#Add labels
labs(title=paste("Sales price vs.",var),
x=var,
y="Sales price") + theme_minimal() +
#Add neat scales for price
scale_y_continuous(breaks= seq(0, 800000, by=100000),
labels = comma)
#Print the plot after each loop
print(plot)
}
#Select significant variables
high_cor_vars <- homes_num%>%
dplyr::select(OverallQual,
GarageArea,
TotalBsmtSF,
X1stFlrSF,
FullBath,
BsmtQualEx,
TotRmsAbvGrd,
YearsSinceBuilt,
YearsSinceRemod,
KitchenQualEx,
KitchenQualTA,
ExterQualTA,
-GrLivArea,
-GarageCars)
#Create name list of high_cor_vars
names_high_cor_vars <- names(high_cor_vars)
#For each variable that is highly correlated
for (var in names_high_cor_vars){
#ggplot with the dataframe with values
plot <- ggplot(high_cor_vars, aes_string(x=var, y=homes_num$SalePrice))+
#geom_point to see distribution
geom_jitter(alpha=0.1)+
#Add labels
labs(title=paste("Sales price vs.",var),
x=var,
y="Sales price")+ theme_minimal()+
#Add neat scales for price
scale_y_continuous(breaks= seq(0, 800000, by=100000),
labels = comma)
#Print the plot after each loop
print(plot)
}
#Save column names
cols <- c("OverallQual", "FullBath", "TotRmsAbvGrd", "BsmtQualEx", "KitchenQualEx", "KitchenQualTA", "ExterQualTA")
#Convert OverallQual, FullBath and TotRmsAbvGrd to a factor
high_cor_vars[cols] <- lapply(high_cor_vars[cols], factor)
#Select significant numeric values
high_cor_vars_fact <- high_cor_vars%>%
dplyr::select(cols)
#Create name list of high_cor_vars
names_high_cor_vars_fact <- names(high_cor_vars_fact)
#For each variable that is highly correlated
for (var in names_high_cor_vars_fact){
#ggplot with the dataframe with values
plot <- ggplot(high_cor_vars_fact, aes_string(x=var, y=homes_num$SalePrice))+
#geom_point to see distribution
geom_boxplot(alpha=0.1)+
#Add labels
labs(title=paste("Sales price vs.",var),
x=var,
y="Sales price") + theme_minimal() +
#Add neat scales for price
scale_y_continuous(breaks= seq(0, 800000, by=100000),
labels = comma)
#Print the plot after each loop
print(plot)
}
complete_cor <- homes_num%>%
#Compute correlation of complete observations
cor(use = "pairwise.complete.obs")
#Make the correlation matrix a tibble
complete_cor_tibble <- as.tibble(as.table(complete_cor))
complete_cor_tibble %>%
#Sort the tibble by descending correlations
arrange(desc(n))%>%
#Filter variables that have an absolute value correlation higher than 0.5 with SalePrice
filter(Var1=="SalePrice"&abs(n)>0.5&Var2!="SalePrice")%>%
#Select variable and correlation
dplyr::select(Var2,n)%>%
#Make table
kable(caption="Top 12 correlations with SalePrice",
#Add column names
col.names = c("Variable","Correlation")) %>%
#Style table
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
complete_cor <- high_cor_vars%>%
#Compute correlation of complete observations
cor(use = "pairwise.complete.obs")
complete_cor <- homes_num%>%
select(-GarageCars,
-GrLivArea)%>%
#Compute correlation of complete observations
cor(use = "pairwise.complete.obs")
#Make the correlation matrix a tibble
complete_cor_tibble <- as.tibble(as.table(complete_cor))
complete_cor_tibble %>%
#Sort the tibble by descending correlations
arrange(desc(n))%>%
#Filter variables that have an absolute value correlation higher than 0.5 with SalePrice
filter(Var1=="SalePrice"&abs(n)>0.5&Var2!="SalePrice")%>%
#Select variable and correlation
dplyr::select(Var2,n)%>%
#Make table
kable(caption="Top 12 correlations with SalePrice",
#Add column names
col.names = c("Variable","Correlation")) %>%
#Style table
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
blogdown
