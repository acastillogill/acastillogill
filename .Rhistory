#Add the cumulative count to the tally
insect_tally$cumulative <- cumsum(insect_tally$n)
#Create plot of cumulative arrivals
ggplot(insect_tally,aes(x=year,y=cumulative))+
geom_line(color="#CD4F39")+
labs(x="Year",
y="Cumulative arrivals",
title=paste("Cumulative sum of invasive insects to Iberia, n =",total_tally))+
theme_minimal()
# Chunk 6: arrivals per year
#Count how many arrivals per year
inv_insects%>%
filter(!is.na(year))%>% #Remove observations with no year
group_by(year)%>% #Group by year
tally()%>% #Count how many observations per year
#Create annual arrival plot
ggplot(aes(x=lubridate::year(year),y=n))+
geom_line(color="#CD4F39")+
labs(x="Year",
y="Annual arrivals",
title=paste("Annual arrivals of invasive insects to Iberia, n =",total_tally))+
theme_minimal()
# Chunk 7: annual arrivals by order
#Count how many arrivals per year
inv_insects%>%
filter(!is.na(year))%>% #Remove observations with no year
group_by(year,order)%>% #Group by year
tally()-> insect_tally_order #Tally and save
#Create plot of annual arrivals by order
ggplot(insect_tally_order,aes(x=year,y=n))+
geom_line(color="#CD4F39")+
facet_wrap(~order)+
labs(x="Year",
y="Annual arrivals",
title="Annual arrivals by order")+
theme_minimal()
# Chunk 8: cumulative arrivals per order
insect_tally_order%>%
group_by(order)%>%
#Count cumulative arrivals per order
dplyr::mutate(arr=cumsum(n))%>%
#Plot arrivals faceted by order
ggplot(aes(x=year,y=arr))+
geom_line(color="#CD4F39")+
facet_wrap(~order)+
labs(x="Year",
y="Cummulative arrivals",
title="Cummulative arrivals by order")+
theme_minimal()
# Chunk 9: barplot of arrivals by order
insect_tally_order%>%
group_by(order)%>%
dplyr::summarise(freq=sum(n))%>%
ggplot(aes(x=reorder(order,freq),y=freq))+
geom_col(color="#CD4F39",fill="#CD4F39",alpha=0.8)+
coord_flip()+
labs(x="Order",
y="Number of invasive insect arrivals",
title="Species by order")+
theme_minimal()
# Chunk 10: annual arrivals by native_ranges
#Count how many arrivals per year
inv_insects%>%
filter(!is.na(year))%>% #Remove observations with no year
group_by(year,native_ranges)%>% #Group by year
tally()-> insect_tally_native_ranges #Tally and save
#Create plot of annual arrivals by native_ranges
ggplot(na.omit(insect_tally_native_ranges),
aes(x=year, y=n))+
geom_line(color="#CD4F39")+
facet_wrap(~native_ranges)+
labs(x="Year",
y="Annual arrivals",
title="Annual arrivals by native ranges")+
theme_minimal()
# Chunk 11: cumulative arrivals per native_ranges
na.omit(insect_tally_native_ranges)%>%
group_by(native_ranges)%>%
#Count cumulative arrivals per native_ranges
dplyr::mutate(arr=cumsum(n))%>%
#Plot arrivals faceted by native_ranges
ggplot(aes(x=year,y=arr))+
geom_line(color="#CD4F39")+
facet_wrap(~native_ranges)+
labs(x="Year",
y="Cummulative arrivals",
title="Cummulative arrivals by native ranges")+
theme_minimal()
# Chunk 12: barplot of arrivals by native_ranges
na.omit(insect_tally_native_ranges)%>%
group_by(native_ranges)%>%
dplyr::summarise(freq=sum(n))%>%
ggplot(aes(x=reorder(native_ranges,freq),y=freq))+
geom_col(color="#CD4F39",fill="#CD4F39",alpha=0.8)+
coord_flip()+
labs(x="Native ranges",
y="Number of invasive insect arrivals",
title="Species by native ranges")+
theme_minimal()
# Chunk 13: arrivals by native_ranges barplot in 4 times
#Make a new variable time range
insect_tally_native_ranges <- insect_tally_native_ranges%>%
mutate(Period = if_else(year < "1926-12-31", "1896-1925",
ifelse(year < "1956-12-31", "1926-1955",
ifelse(year < "1986-12-31","1956-1985",
"1986-2018"))))
na.omit(insect_tally_native_ranges)%>%
group_by(native_ranges, Period)%>%
dplyr::summarise(freq=sum(n))%>%
arrange(desc(freq))->native_freq_period
ggplot(native_freq_period,
aes(y=reorder(native_ranges,freq),x=freq))+
geom_barh(stat= "identity",
color="#CD4F39",
fill="#CD4F39",
alpha=0.8)+
labs(x="Native ranges",
y="Number of invasive insect arrivals",
title="Species by native ranges")+
theme_minimal()+
facet_wrap(~Period)
# Chunk 14: counting potential actual damage
#Count how many arrivals per year
inv_insects%>%
filter(!is.na(year))%>% #Remove observations with no year
group_by(year,potential_actual_damage)%>% #Group by year
tally()-> tally_potential_actual_damage #Tally and save
# Chunk 15: barplot of arrivals by potential_actual_damage
na.omit(tally_potential_actual_damage )%>%
group_by(potential_actual_damage)%>%
dplyr::summarise(freq=sum(n))%>%
ggplot(aes(x=reorder(potential_actual_damage,freq),y=freq))+
geom_col(color="#CD4F39",fill="#CD4F39",alpha=0.8)+
coord_flip()+
labs(x="Potential/actual damage",
y="Number of species",
title="Species by potential/actual damage")+
theme_minimal()
# Chunk 16: import climate data
#Source: http://sdwebx.worldbank.org/climateportal/index.cfm?page=downscaled_data_download&menu=historical
sp_rain <- read.xls("/Volumes/TOSHIBAEXT/google_drive/PhD/Database/spain_rainfall.xls")
names(sp_rain) <- c("pr","year","month","drop1","drop2","drop3")
sp_rain <- sp_rain%>%
dplyr::select(pr, year, month)
sp_rain <- sp_rain%>%
group_by(year)%>%
mutate(yearmonth = 1:length(month))%>%
ungroup()
ggplot(sp_rain,aes(x=yearmonth,y=pr))+
geom_line(alpha=0.5)+
theme_minimal()+
labs(x="Month",
y="Precipitation (mm)",
title="Monthly precipitation in Spain (1901-2015)")+
geom_smooth(method = lm,
color="#008B00",
fill="#008B00")
pt_rain <- read.xls("/Volumes/TOSHIBAEXT/google_drive/PhD/Database/portugal_rainfall.xls")
names(pt_rain) <- c("pr","year","month","drop1","drop2","drop3")
pt_rain <- pt_rain%>%
dplyr::select(pr, year, month)
pt_rain <- pt_rain%>%
group_by(year)%>%
mutate(yearmonth = 1:length(month))%>%
ungroup()
ggplot(pt_rain,aes(x=yearmonth,y=pr))+
geom_line(alpha=0.5)+
theme_minimal()+
labs(x="Month",
y="Precipitation (mm)",
title="Monthly precipitation in Portugal (1901-2015)")+
geom_smooth(method = lm,
color="#008B00",
fill="#008B00")
pt_temp <- read.xls("/Volumes/TOSHIBAEXT/google_drive/PhD/Database/portugal_temperature.xls")
names(pt_temp) <- c("pr","year","month","drop1","drop2","drop3")
pt_temp <- pt_temp%>%
dplyr::select(pr, year, month)
pt_temp <- pt_temp%>%
group_by(year)%>%
mutate(yearmonth = 1:length(month))%>%
ungroup()
ggplot(pt_temp,aes(x=yearmonth,y=pr))+
geom_line(alpha=0.5)+
theme_minimal()+
labs(x="Month",
y="Temperature (C)",
title="Monthly temperature in Portugal (1901-2015)")+
geom_smooth(method = lm,
color="#008B00",
fill="#008B00")
sp_temp <- read.xls("/Volumes/TOSHIBAEXT/google_drive/PhD/Database/spain_temperature.xls")
names(sp_temp) <- c("pr","year","month","drop1","drop2","drop3")
sp_temp <- sp_temp%>%
dplyr::select(pr, year, month)
sp_temp <- sp_temp%>%
group_by(year)%>%
mutate(yearmonth = 1:length(month))%>%
ungroup()
ggplot(sp_temp,aes(x=yearmonth,y=pr))+
geom_line(alpha=0.5)+
theme_minimal()+
labs(x="Month",
y="Temperature (C)",
title="Monthly temperature in Spain (1901-2015)")+
geom_smooth(method = lm,
color="#008B00",
fill="#008B00")
# Chunk 17: join 4 climate variables
#Step 1: Aggregate sp_rain into annual
sp_rain_ag <- aggregate(pr ~ year, sp_rain, mean)
sp_temp_ag <- aggregate(pr ~ year, sp_temp, mean)
pt_rain_ag <- aggregate(pr ~ year, pt_rain, mean)
pt_temp_ag <- aggregate(pr ~ year, pt_temp, mean)
#Step 2 <- Create a tibble with all climatic variables
all_clim <- tibble(sp_temp_ag$pr,
pt_temp_ag$pr,
sp_rain_ag$pr,
pt_rain_ag$pr,
pt_temp_ag$year)
#Step 3 <- Make nice names
names(all_clim) <- c("sp_temp","pt_temp","sp_rain","pt_rain","year")
#Step 4 <- Make date
all_clim$date <- as.Date(paste(all_clim$year,
12, 31, sep = "-"))
#Step 4a Remove year
all_clim <- all_clim %>%
dplyr::select(-year)
# Chunk 18: import trade data
# Read trade data
trade <- read_csv("/Volumes/TOSHIBAEXT/google_drive/PhD/Database/commodity_trade_statistics_data.csv")
# Chunk 19: create trade for Spain and Portugal
#SPAIN
#Filter imports for Spain and Portugal and save in ib_trade_pt
trade %>%
filter(country_or_area=="Spain",
flow=="Import") -> trade_sp
#Removing NAs
trade_sp <- na.omit(trade_sp)
#Make year a date
trade_sp$year <- as.Date(paste(trade_sp$year,
12, 31, sep = "-"))
#Make the commodity variable a factor
trade_sp$commodity <- as.factor(trade_sp$commodity)
#Make categories a factor
trade_sp$category <- as.factor(trade_sp$category)
#Make country a factor
trade_sp$country_or_area <- as.factor((trade_sp$country_or_area))
#PORTUGAL
#Filter imports for Spain and Portugal and save in ib_trade_pt
trade %>%
filter(country_or_area=="Portugal",
flow=="Import") -> trade_pt
#Removing NAs
trade_pt <- na.omit(trade_pt)
#Make year a date
trade_pt$year <- as.Date(paste(trade_pt$year,
12, 31, sep = "-"))
#Make the commodity variable a factor
trade_pt$commodity <- as.factor(trade_pt$commodity)
#Make categories a factor
trade_pt$category <- as.factor(trade_pt$category)
#Make country a factor
trade_pt$country_or_area <- as.factor((trade_pt$country_or_area))
# Chunk 20
#Aggregate all commodities
spain_trade_ag <- aggregate(weight_kg ~ year, sum, data=trade_sp)
portugal_trade_ag <- aggregate(weight_kg ~ year, sum, data=trade_pt)
# Chunk 21
#Left join to all_clim
all_clim <- all_clim %>%
left_join(spain_trade_ag,by=c("date"="year"))%>%
left_join(portugal_trade_ag,by=c("date"="year"))%>%
left_join(insect_tally, by=c("date"="year"))
names(all_clim) <- c("sp_temp","pt_temp","sp_rain","pt_rain","date","sp_imports","pt_imports","Annual arrivals","Cumulative arrivals")
#Step 5 <- Reshape the data
all_clim_melt <- reshape2::melt(all_clim, id.vars = "date")
# Chunk 22
#Plot temperature and insects
all_clim_temp <- all_clim%>%
dplyr::select("sp_temp","pt_temp","Annual arrivals","Cumulative arrivals","date")
#Melt temperature
all_clim_temp_melt <- reshape2::melt(all_clim_temp, id.vars = "date")
all_clim_rain <- all_clim%>%
dplyr::select("sp_rain","pt_rain","Annual arrivals","Cumulative arrivals","date")
#Melt rain
all_clim_rain_melt <- reshape2::melt(all_clim_rain, id.vars = "date")
all_clim_imports<- all_clim%>%
dplyr::select("sp_imports","pt_imports","Annual arrivals","Cumulative arrivals","date")
#Melt imports
all_clim_imports_melt <- reshape2::melt(all_clim_imports, id.vars = "date")
# Chunk 23
#Plot temperature data
ggplot(all_clim_temp_melt, aes(x = date, y = value)) +
geom_line() +
facet_wrap(~ variable, scales = 'free_y', ncol = 1)+
theme_minimal()+
labs(x="Date",
y="Variable",
title="Annual values (1901-2015)")
# Chunk 24
#Plot rain data
ggplot(all_clim_rain_melt, aes(x = date, y = value)) +
geom_line() +
facet_wrap(~ variable, scales = 'free_y', ncol = 1)+
theme_minimal()+
labs(x="Date",
y="Variable",
title="Annual values (1901-2015)")
# Chunk 25
#Plot imports data
ggplot(all_clim_imports_melt, aes(x = date, y = value)) +
geom_line() +
facet_wrap(~ variable, scales = 'free_y', ncol = 1)+
theme_minimal()+
labs(x="Date",
y="Variable",
title="Annual values (1901-2015), trade data available between (1988-2016)")
# Chunk 26
#Plot all data
ggplot(all_clim_melt, aes(x = date, y = value)) +
geom_line() +
facet_wrap(~ variable, scales = 'free_y', ncol = 1)+
theme_minimal()+
labs(x="Date",
y="Variable",
title="Annual values (1901-2015), trade data available between (1988-2016)")
# Chunk 27
str(all_clim_melt)
# Chunk 28
#Create data object
sp_temp$date <- as.yearmon(paste(sp_temp$year,sp_temp$month),"%Y%m")
#Make a xts object
sp_temp_xts <- as.xts(x=as.vector(sp_temp$pr), order.by = as.Date(sp_temp$date))
# Chunk 29
plot(sp_temp_xts)
# Chunk 30
#Make tally a matrix
insect_tally_matrix <- as.matrix(insect_tally[,2:3])
#Create xts object
insects_xts <- xts(x=insect_tally_matrix, order.by = as.Date(insect_tally$year))
# Chunk 31
plot(insects_xts)
# Chunk 32
#I want to merge insects_xts with sp_temp_xts
test <- merge(sp_temp_xts, insects_xts, fill=NA, join="outer")
# Chunk 33
#Create cum_last, the cumulative arrivals with missing values filled with last observation carried forward
cum_last <- na.locf(test$cumulative)
#Create n_last, the annual arrivals with missing values linearly interpolated based on the dsitance between timestamps
n_floor <- floor(na.approx(test$n))
#Fill missing values with a zero
n_zero <- na.fill(test$n, fill = 0)
#Push n_floor and n_zero 10 years back
n_floor_lag <- lag.xts(n_floor,k=-120)
n_zero_lag <- lag.xts(n_zero,k=-120)
#Round down the interpolation
insects_interpol$n_fl <- floor(insects_interpol$n)
#Merge cum_last and n_interpol
insects_interpol <- merge(n_floor, n_zero, n_floor_lag, n_zero_lag)
#Create names for insects timeseries
names(insects_interpol) <- c("n_approx", "n_zero", "n_floor_lag", "n_zero_lago")
plot(insects_interpol)
# Chunk 34
#Create climate matrix
all_clim_matrix <- matrix(data=c(sp_temp$pr,
pt_temp$pr,
sp_rain$pr,
pt_rain$pr), ncol=4)
#Create climate xts object
all_clim_xts <- xts(x= all_clim_matrix, order.by = as.Date(sp_temp$date))
#Merge other 4 weather variables with insects_interpol
insect_clim <- merge(insects_interpol,all_clim_xts, fill= NA, join="outer")
#Fill some NAs
insect_clim <- na.omit(insect_clim)
# Chunk 35
#endpoints() for decades
ep <- endpoints(insects_interpol, on="years", k=10)
# Chunk 36
#How many insects arrived each decade
period.apply(insects_interpol[,"n_zero"],
INDEX = ep,
FUN = sum)
blogdown::serve_site()
rm(list = ls())
x <-
c("tidyverse",
"knitr",
"formatR",
"stringr",
"quantmode",
"skimr",
"lubridate",
"tidyr",
"formattable",
"grid",
"gridExtra",
"kableExtra",
"here",
"corrplot",
"rms")
lapply(x, require, character.only = TRUE)
opts_chunk$set(echo = FALSE,
warning = FALSE,
error = FALSE,
message = FALSE,
collapse= TRUE,
comment = NA,
tidy = TRUE)
path <- "/Volumes/TOSHIBAEXT/RStudio/blog/content/post/house_prices/"
#Read `train.csv` as homes
homes <- read.csv(paste0(path,"train.csv"), stringsAsFactors = TRUE)
#Get a glimpse of homes
glimpse(homes)
#is.numeric returns TRUE if the variable is numeric.
#sapply iterates and returns a vector.
#Which gives the indices that were TRUE
num_var <- which(sapply(homes, is.numeric))
#Count how many variables are numeric
length(num_var)
#Return a vector with categorical variables
cat_var <- which(sapply(homes, is.factor))
#Count how many variables are categorical
length(cat_var)
#Create object cor_homes
cor_homes <-homes%>%
#Select only numeric variables
select_if(is.numeric)%>%
#Remove the Id variable
dplyr::select(-Id)%>%
#Compute correlation of complete observations
cor(use = "pairwise.complete.obs")
#Make the correlation matrix a tibble
cor_tibble <- as.tibble(as.table(cor_homes))
cor_tibble%>%
#Sort the tibble by descending correlations
arrange(desc(n))%>%
#Filter variables that have an absolute value correlation higher than 0.5 with SalePrice
filter(Var1=="SalePrice"&abs(n)>0.5&Var2!="SalePrice")%>%
#Select variable and correlation
dplyr::select(Var2,n)%>%
#Make table
kable(caption="Top 10 correlations with SalePrice",
#Add column names
col.names = c("Variable","Correlation")) %>%
#Style table
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
#Make a simple model
simple_model <- lm(SalePrice ~ OverallQual + GrLivArea + GarageCars + GarageArea + TotalBsmtSF + X1stFlrSF + FullBath + TotRmsAbvGrd + YearBuilt + YearRemodAdd, data = homes )
#Checking for multicolinearity
vif(simple_model)
#Make a corrected_model
corrected_model <- lm(SalePrice ~ OverallQual + GarageArea + TotalBsmtSF + X1stFlrSF + FullBath + TotRmsAbvGrd + YearBuilt + YearRemodAdd, data = homes)
#Checking for multicolinearity
vif(corrected_model)
#Select significant numeric values
high_cor_vars <- homes%>%
dplyr::select(
OverallQual,
GarageArea,
TotalBsmtSF,
X1stFlrSF,
FullBath,
TotRmsAbvGrd,
YearBuilt,
YearRemodAdd)
#Create name list of high_cor_vars
names_high_cor_vars <- names(high_cor_vars)
#For each variable that is highly correlated
for (var in names_high_cor_vars){
#ggplot with the dataframe with values
plot <- ggplot(high_cor_vars, aes_string(x=var, y=homes$SalePrice))+
#geom_point to see distribution
geom_jitter(alpha=0.1)+
#Add labels
labs(title=paste("Sales price vs.",var),
x=var,
y="Sales price")+ theme_minimal()+
#Add neat scales for price
scale_y_continuous(breaks= seq(0, 800000, by=100000),
labels = comma)
#Print the plot after each loop
print(plot)
}
#Save column names
cols <- c("OverallQual", "FullBath", "TotRmsAbvGrd")
#Convert OverallQual, FullBath and TotRmsAbvGrd to a factor
high_cor_vars[cols] <- lapply(high_cor_vars[cols], factor)
#Select significant numeric values
high_cor_vars_fact <- high_cor_vars%>%
dplyr::select(OverallQual,
FullBath,
TotRmsAbvGrd)
#Create name list of high_cor_vars
names_high_cor_vars_fact <- names(high_cor_vars_fact)
#For each variable that is highly correlated
for (var in names_high_cor_vars_fact){
#ggplot with the dataframe with values
plot <- ggplot(high_cor_vars_fact, aes_string(x=var, y=homes$SalePrice))+
#geom_point to see distribution
geom_boxplot(alpha=0.1)+
#Add labels
labs(title=paste("Sales price vs.",var),
x=var,
y="Sales price") + theme_minimal() +
#Add neat scales for price
scale_y_continuous(breaks= seq(0, 800000, by=100000),
labels = comma)
#Print the plot after each loop
print(plot)
}
blogdown::serve_site()
