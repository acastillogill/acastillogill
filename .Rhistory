labs(
title = "Upper bound",
x = "Time",
y = "Euros"
)+theme(legend.position = "top",
text = element_text(size=20)) -> upper_costs_plot
costs_combined_total<- arrangeGrob(lower_costs_plot,upper_costs_plot, nrow=2)
ggsave("costs_combined_total.png",
costs_combined_total,
width = 14,
height= 16,
limitsize = FALSE,
bg="transparent")
PV <- future_value(USD,real_rate = real_rate,periods = (year(Sys.Date())-Date))
Source <- as.vector(c("IAWG, 2016","van den Bergh \\& Botzen, 2014"))
SCC_table <- data_frame(Source,USD,Date,EUR,PV)
SCC_table%>%
set_names(c("Source","USD","Published date","EUR", "Present value"))%>%
kable(
caption = "\\label{tab:scc}Social cost of carbon dioxide per tonne.",
booktabs = T,
escape = F) %>%
kable_styling(latex_options = c("hold_position"))
#Constants
net_carbon <- 0.000191 #Define the net carbon sequestration capacity per tree (tonnes/tree)
SCC_carbon_upper <-SCC_table$PV[2] #Define the upper social cost of carbon per one tonne (euros)
SCC_carbon_lower <- SCC_table$PV[1] #Define the upper social cost of carbon per one tonne (euros)
date_lower <- df_date %>%
filter(run==low_run)%>%
mutate(total=sHeal+sInf+sTre)
date_upper <- df_date %>%
filter(run==high_run)%>%
mutate(total=sHeal+sInf+sTre)
canary_lower <- df_canary %>%
filter(run==low_run)%>%
mutate(total=sHeal+sInf+sTre)
canary_upper <- df_canary %>%
filter(run==high_run)%>%
mutate(total=sHeal+sInf+sTre)
carbon_lower_date <- date_lower$total*SCC_carbon_lower*net_carbon
carbon_lower_date <-future_value(carbon_lower_date,
real_rate = real_rate,
periods = (year(Sys.Date())-time))
carbon_upper_date <- date_upper$total*SCC_carbon_upper*net_carbon
carbon_upper_date <-future_value(carbon_upper_date,
real_rate = real_rate,
periods = (year(Sys.Date())-time))
carbon_lower_canary <- canary_lower$total*SCC_carbon_lower*net_carbon
carbon_lower_canary <-future_value(carbon_lower_canary,
real_rate = real_rate,
periods = (year(Sys.Date())-time))
carbon_upper_canary <- canary_upper$total*SCC_carbon_upper*net_carbon
carbon_upper_canary <-future_value(carbon_upper_canary,
real_rate = real_rate,
periods = (year(Sys.Date())-time))
carbon_benefits <- data.frame(time,
carbon_lower_date,
carbon_upper_date,
carbon_lower_canary,
carbon_upper_canary)
carbon_benefits <- carbon_benefits%>%
mutate(total_lower=carbon_lower_date+carbon_lower_canary,
total_upper=carbon_upper_date+carbon_upper_canary)%>%
dplyr::select(time,carbon_lower_date,carbon_lower_canary,total_lower,
carbon_upper_date,carbon_upper_canary,total_upper)
total_costs %>%
mutate(total_lower=gov_cost_present+lower_date+lower_canary,
total_upper=gov_cost_present+upper_date+upper_canary) -> total_costs
carbon_benefits%>%
mutate(total_lower=  carbon_lower_date+carbon_lower_canary,
total_upper=carbon_lower_canary+carbon_upper_canary) -> total_benefits
cb_lower <- data.frame(time, total_costs$total_lower,total_benefits$total_lower)
names(cb_lower) <- c("time","costs","benefits")
cb_upper <- data.frame(time, total_costs$total_upper,total_benefits$total_lower)
names(cb_upper) <- c("time","costs","benefits")
cb_lower%>%
summarise(sum(costs),sum(benefits)) ->cb_total_lower
cb_upper%>%
summarise(sum(costs),sum(benefits))->cb_total_upper
cb_lower %>%
mutate(costs=costs/1000)%>%
gather(key = "type",value="amount",2:3)%>%
ggplot(aes(x=time,
y=amount,
color=type))+
geom_area(aes(fill=type),
position = "dodge",
alpha=0.5,linetype="dashed",size=1 )+
theme_classic()+
scale_x_continuous(breaks = int_breaks)+
guides( color = FALSE,
fill = guide_legend(title = "Cost type"))+
scale_fill_manual(values=c("#00BA38","#F8766D"))+
scale_color_manual(values=c("#00BA38","#F8766D"))+
labs(
title = "Costs vs. benefits (lower bound)",
subtitle = "Costs were divided by 1,000 to allow benefits to appear in the plot.",
x = "Time",
y = "Euros"
)+theme(legend.position = "top",
text=element_text(size=10)) -> cb_lower_plot
cb_upper %>%
mutate(costs=costs/1000)%>%
gather(key = "type",value="amount",2:3)%>%
ggplot(aes(x=time,
y=amount,
color=type))+
geom_area(aes(fill=type),
position = "dodge",
alpha=0.5,linetype="dashed",size=1 )+
theme_classic()+
scale_fill_manual(values=c("#00BA38","#F8766D"))+
scale_color_manual(values=c("#00BA38","#F8766D"))+
scale_x_continuous(breaks = int_breaks)+
guides( color = FALSE,
fill = guide_legend(title = "Cost type"))+
labs(
title = "Costs vs. benefits (upper bound)",
subtitle = "Costs were divided by 1,000 to allow benefits to appear in the plot.",
x = "Time",
y = "Euros"
)+theme(legend.position = "top",
text=element_text(size=10)) -> cb_upper_plot
cost_benefit_plot<- arrangeGrob(cb_lower_plot,cb_upper_plot, nrow=2)
ggsave("cost_benefit_plot.png",
cost_benefit_plot,
width = 8,
height= 8,
limitsize = FALSE,
bg="transparent")
nsb_low <- round(sum(carbon_benefits$total_lower)-sum(total_costs$total_lower),digits = 0)
nsb_ratio_low  <- round(sum(total_costs$total_lower)/sum(carbon_benefits$total_lower),digits=0)
nsb_high <- round(sum(carbon_benefits$total_upper)-sum(total_costs$total_upper),digits=0)
nsb_ratio_high <- round(sum(total_costs$total_upper)/sum(carbon_benefits$total_upper),digits=0)
Summary_Stock <- as.vector(c("Healthy","Infested","In treatment","Lost","Replanted","Total population"))
Stock <- as.vector(c("$S_t^H$","$S_t^I$","$S_t^{T}$","$S_t^L$","$S_t^R$","$S_t$"))
df_stock <- as_tibble(Stock,Summary_Stock)
colnames(df_stock) <- c("Stock")
kable(df_stock, caption = "\\label{tab:stocks}Palm tree stocks.", booktabs = T,escape = F) %>%
kable_styling(latex_options = c("hold_position"))
Summary_Flow <- as.vector(c("Replanted",
"Failed prevention",
"Untreated",
"Treated",
"Failed treatment",
"Successful treatment"))
Flow <- as.vector(c("$F_{t,t-1}^R$",
"$F_{t,t-1}^{FP}$",
"$F_{t,t-1}^{UTR}$",
"$F_{t,t-1}^{TR}$",
"$F_{t,t-1}^{FT}$",
"$F_{t,t-1}^{ST}$"
))
df_flow <- as_tibble(Flow,Summary_Flow)
colnames(df_flow) <- c("Flow")
kable(df_flow, caption = "\\label{tab:flows}Palm tree flows.", booktabs = T,escape = F) %>%
kable_styling(latex_options = c("hold_position"))
gencat%>%
set_names(c("Year","GenCat cost","GenCat cost present"))%>%
kable(
caption = "\\label{tab:gencat_table}GenCat costs associated to RPW expenditure over time.",
booktabs = T,
escape = F,
linesep= ""
) %>%
kable_styling(latex_options = c("hold_position"))%>%
footnote(general= c(
paste("Total cost of all activities for all years is ",
round(sum(gencat$gov_cost_present),
digits = 0),
".",sep = ""),
"Source: GENCAT, 2018."),
footnote_as_chunk = T)
date_cost_low%>%
set_names(c("Year","Replanting","Inspection","Prevention","Treatment","Removal","Total"))%>%
kable(
caption = "\\label{tab:date_costs_low}Management costs (lower bound) for date palms over time.",
booktabs = T,
escape = F,
linesep= ""
) %>%
kable_styling(latex_options = c("hold_position"))%>%
footnote(general=paste("Total cost of all activities for all years is ",round(sum(date_cost_low$total),digits = 0),".",sep = ""),
footnote_as_chunk = T)
date_cost_high%>%
set_names(c("Year","Replanting","Inspection","Prevention","Treatment","Removal","Total"))%>%
kable(
caption = "\\label{tab:date_costs_high}Management costs (upper bound) for date palms over time.",
booktabs = T,
escape = F,
linesep= ""
) %>%
kable_styling(latex_options = c("hold_position"))%>%
footnote(general=paste("Total cost of all activities for all years is ",round(sum(date_cost_high$total),digits = 0),".",sep = ""),
footnote_as_chunk = T)
canary_cost_low%>%
set_names(c("Year","Replanting","Inspection","Prevention","Treatment","Removal","Total"))%>%
kable(
caption = "\\label{tab:canary_costs_low}Management costs (lower bound) for canary palms over time.",
booktabs = T,
escape = F,
linesep= ""
) %>%
kable_styling(latex_options = c("hold_position"))%>%
footnote(general=paste("Total cost of all activities for all years is ",round(sum(canary_cost_low$total),digits = 0),".",sep = ""), footnote_as_chunk = T)
canary_cost_high%>%
set_names(c("Year","Replanting","Inspection","Prevention","Treatment","Removal","Total"))%>%
kable(
caption = "\\label{tab:canary_costs_high}Management costs (upper bound) for canary palms over time.",
booktabs = T,
escape = F,
linesep= ""
) %>%
kable_styling(latex_options = c("hold_position"))%>%
footnote(general=paste("Total cost of all activities for all years is ",round(sum(canary_cost_high$total),digits = 0),".",sep = ""), footnote_as_chunk = T)
total_costs%>%
set_names(c("Year","GenCat","Date","Canary","Total","Date","Canary","Total"))%>%
kable(
caption = "\\label{tab:total_costs}Total costs.",
booktabs = T,
escape = F,
linesep= ""
) %>%
kable_styling(latex_options = c("hold_position"))%>%
add_header_above(c("","","Lower"=3,"Higher"=3))%>%
footnote(general=paste("Total for lower bound is ",round(sum(total_costs$total_lower),digits=0),", total for higher bound is ",round(sum(total_costs$total_upper),digits=0),sep = ""), footnote_as_chunk = T)
carbon_benefits%>%
set_names(c("Year","Date","Canary","Total","Date","Canary","Total"))%>%
kable(
caption = "\\label{tab:carbon_costs}Carbon sequestration values over time.",
booktabs = T,
escape = F,
linesep= ""
) %>%
kable_styling(latex_options = c("hold_position"))%>%
add_header_above(c("","Lower"=3,"Higher"=3))%>%
footnote(general=paste("Combining the totals for all years for both species yields a lower bound of ",round(sum(carbon_benefits$total_lower),digits=0)," and a higher bound of ",round(sum(carbon_benefits$total_upper),digits=0),".",sep = ""),
footnote_as_chunk = T)
Figure \ref{fig:catalonia} shows the invasion status of RPW in Catalonia up to November 2016 []
Figure \ref{fig:catalonia}
citr:::insert_citation()
citr:::insert_citation()
x <-
c("tidyverse",
"bookdown",
"knitr",
"kableExtra",
"formatR",
"stringr",
"rebus",
"quantmode",
"skimr",
"lubridate",
"broom",
"tidyr",
"GGally")
lapply(x, require, character.only = TRUE)
opts_chunk$set(echo = TRUE,
warning = FALSE,
error = FALSE,
message = FALSE,
collapse= TRUE,
comment = NA,
tidy = FALSE)
path <- "/Volumes/TOSHIBAEXT/RStudio/blog/content/post/kiva_data/"
#Read `kiva_loans.csv`
kiva_loans <- read_csv(paste(path,"kiva_loans.csv",sep = ""))
#Read `kiva_mpi_region_locations.csv`
kiva_locations <- read_csv(paste(path,"kiva_mpi_region_locations.csv",sep=""))
#Read `loan_theme_ids.csv`
kiva_themes <- read_csv(paste(path,"loan_theme_ids.csv",sep=""))
#Read`loan_themes_by_region.csv`
kiva_locations_themes <- read_csv(paste(path,"loan_themes_by_region.csv",sep=""))
#Get a glimpse of kiva_loans
glimpse(kiva_loans)
#Select variables
kiva_loans %>%
dplyr::select (id,
loan_amount,
sector,
country_code,
currency,
posted_time,
disbursed_time,
term_in_months,
lender_count,
borrower_genders,
repayment_interval,
funded_time) -> kiva_loans
#Convert country_code, sector, currency, borrower_genders, and repayment_interval to factors.
categorical <- c("sector",
"country_code",
"currency",
"borrower_genders",
"repayment_interval")
kiva_loans[categorical] <- lapply(kiva_loans[categorical],
factor)
summary(kiva_loans)
#Turn kiva_loans back into an atomic vector of characters
kiva_loans$borrower_genders <- as.character(kiva_loans$borrower_genders)
#Split each row into multiple strings
genders <- str_split(kiva_loans$borrower_genders, ", ")
#Assign 1 for female and 0 for male
females_count <- lapply(genders, str_count, pattern="female")
#Count how many females are in each list element
females_sum <- lapply(females_count, sum)
#Create a function that takes the two lists just made
compare_genders <- function(females_count, females_sum){
#Set "single_female" when female sum and length is 1
ifelse (females_sum==1&&length(females_count)==1, "single_female",
#Set "mult_females" when female sum and length females_count is the same and different to zero
ifelse(females_sum==length(females_count)&&females_sum!=0,"mult_females",
#Set "single_male" #Set "mult_males" when female sum is zero and the count of individuals is 1
ifelse(females_sum==0&&length(females_count)==1,"single_male",
#Set "mult_males" when female sum is zero and the count of individuals is greater than 1
ifelse(females_sum==0&&length(females_count)>1,"mult_males",
#Set "mixed_genders" when the sum of females is different to the count of individual
ifelse(females_sum!=length(females_count),"mixed_genders","strange")))))
}
#Apply function compare_genders
kiva_loans$borrower_genders <- mapply(compare_genders,females_count,females_sum)
#Make kiva_loans$borrower_genders a factor again
kiva_loans$borrower_genders <- as.factor(kiva_loans$borrower_genders)
#Check levels
levels(kiva_loans$borrower_genders)
for (curr in levels(kiva_loans$currency))
#Check that all currencies do not return any errors when requesting a currency conversion
tryCatch(quantmod::getQuote(paste0(curr, "=X")), error = print)
#Turning kiva_loans back into a character vector
kiva_loans$currency <- as.character(kiva_loans$currency)
kiva_loans%>%
#Filter out "SSP"
dplyr::filter(currency!="SSP")%>%
#Filter out "ZWD"
filter(currency!="ZWD")->kiva_loans
#Turn kiva_loans$currency back into a factor
kiva_loans$currency <- as.factor(kiva_loans$currency)
#Store all levels as vector `from`
from <- as.vector(levels(kiva_loans$currency))
#Create a vector `to` with requested currency "USD"
to <- rep(length(levels(kiva_loans$currency)),x="USD")
#Create a dataframe `currencies` with conversion rates `Last`
currencies <- quantmod::getQuote(paste0(from, to, "=X"))
#Set row names as columns in the currencies dataframe
currencies <- rownames_to_column(currencies)
#Split currencies$rownames by extracting the first 3 characters
currencies$currency <-  substring(currencies$rowname, 1,3)
kiva_loans%>%
#Join currencies to kiva_loans by="currency"
left_join(currencies, by="currency") -> kiva_loans
kiva_loans%>%
#Convert the loan from its original currency to USD
mutate(loan_usd=loan_amount*Last)-> kiva_loans
#Read `country_continent.csv`
continents <- read_csv(paste(path,"country_continent.csv",sep = ""))
kiva_loans%>%
#Join currencies to kiva_loans by="country_code"
left_join(continents, by="country_code") -> kiva_loans
kiva_loans$continent <- as.factor(kiva_loans$continent)
levels(kiva_loans$continent)
kiva_loans%>%
mutate(total_time_num=as.numeric(difftime(posted_time,
disbursed_time,
units = "days")),
giving_time_num=as.numeric(difftime(funded_time,
posted_time,
units = "days"))) ->kiva_loans
#Select variables
kiva_loans %>%
dplyr::select (id,
loan_usd,
sector,
continent,
term_in_months,
lender_count,
borrower_genders,
repayment_interval,
total_time_num,
giving_time_num,
country_code,
posted_time,
funded_time,
disbursed_time)%>%
arrange(posted_time)-> kiva_loans
kiva_loans$country_code <- as.factor(kiva_loans$country_code)
kiva_loans$id <- as.character(kiva_loans$id)
#Skim the dataset
skim(kiva_loans)
prop.table(table(kiva_loans$borrower_genders))
prop.table(table(kiva_loans$continent))
prop.table(table(kiva_loans$repayment_interval))
prop.table(table(kiva_loans$sector))
kiva_loans <-  kiva_loans%>%
filter(continent!="EU",
repayment_interval!="weekly",
sector!="Construction"&
sector!="Entertainment"&
sector!= "Manufacturing"&
sector!= "Wholesale")%>%
droplevels()
# Create side-by-side barchart of borrower_genders by continent
ggplot(kiva_loans, aes(x = continent, fill = borrower_genders)) +
geom_bar(position = "dodge") +theme_classic()
#Create side-by-side barchart of repayment interval by continent
ggplot(kiva_loans,
aes(x = continent, fill = repayment_interval)) +
geom_bar(position = "dodge")+
theme_classic()
# Create side-by-side barchart of sector by continent
ggplot(kiva_loans, aes(x = continent, fill = sector)) +
geom_bar(position = "dodge")+ theme_classic()
kiva_loans %>%
group_by(country_code) %>%
dplyr::count(country_code, sort = TRUE) %>%
ungroup() %>%
top_n(10) %>%
ggplot(aes(reorder(x = country_code, n), y = n)) +
geom_col(position = "dodge",
color = "purple",
fill = "purple") +
coord_flip() +
theme_minimal() +
labs(title = "Top 10 countries requesting Kiva Loans",
x = "",
y = "Country count")
ggplot(kiva_loans, aes(x = loan_usd)) +
geom_density() +
theme_classic() +
scale_x_continuous(limits = c(0, 15)) +
geom_vline(
xintercept = median(kiva_loans$loan_usd),
color = "red",
linetype = "dashed") +
annotate(
"text",
label = paste("Median =",
round(median(kiva_loans$loan_usd), digits = 2), "USD"),
x = 5,
y = 0.2,
color = "red"
) +
labs(title = "Distribution of Kiva loans in USD",
x = "US dollars",
y = "")
ggplot(kiva_loans,
aes(x=term_in_months))+
geom_density()+
theme_classic()+
scale_x_continuous(limits=c(0,50))+
geom_vline(xintercept = median(kiva_loans$term_in_months),
color="red",
linetype="dashed")+
annotate("text",
label=paste("Median =",
median(kiva_loans$term_in_months),"months"),
x=18,
y=0.2,
color="red")
ggplot(kiva_loans,
aes(x=lender_count))+
geom_histogram()+
theme_classic()+
scale_x_continuous(limits=c(0,100))+
geom_vline(xintercept = median(kiva_loans$lender_count),
color="red",
linetype="dashed")+
annotate("text",
label=paste("Median=",
median(kiva_loans$lender_count),"lenders"),
x=21,
y=150000,
color="red")
ggplot(kiva_loans,
aes(x=giving_time_num))+
geom_density()+
theme_classic()+
scale_x_continuous(limits=c(0,50))+
geom_vline(xintercept = median(kiva_loans$giving_time_num,na.rm=TRUE),
color="red",
linetype="dashed")+
annotate("text",
label=paste("Median=",
round(median(kiva_loans$giving_time_num,na.rm = TRUE)),digits=2,"days"),
x=median(kiva_loans$giving_time_num,na.rm=TRUE)+5,
y=0.1,
color="red")
ggplot(kiva_loans,
aes(x=total_time_num))+
geom_density()+
theme_classic()+
scale_x_continuous(limits=c(0,50))+
geom_vline(xintercept = median(kiva_loans$total_time_num,
na.rm=TRUE),
color="red",
linetype="dashed")+
annotate("text",
label=paste("Median=",
round(median(kiva_loans$total_time_num,
na.rm = TRUE)),digits=2,"days"),
x=15+5,
y=0.1,
color="red")
blogdown::serve_site()
currencies
class(currencies)
glimpse(currencies)
saveRDS(currencies,file="currencies.rds")
write.csv(currencies,"currencies.csv")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
