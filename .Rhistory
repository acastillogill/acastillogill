ggplot(aes(lender_count)) +
#Select histograph
geom_histogram(color="#84628e", alpha=0.1, fill="white", binwidth = 1) +
#Facet per country
facet_wrap( ~ label, ncol = 4, scales="free") +
#Add median line
geom_vline(aes(xintercept = country_lender_median)) +
#Minimal theme
theme_minimal() +
#Add limits to the x axis
xlim(0,70) +
#Remove x axis labels
theme(axis.text.x = element_blank())+
#Add labels to all the plot
labs(x = "Lenders", y = "Frequency",
title = "How many lenders fund a single Kiva microloan per country?",
subtitle="Top 16 countries borrowing countries included.")
# Chunk 37: giving-time
ggplot(kiva_loans,
aes(x=giving_time_num))+
geom_density(color="#84628e",alpha=0.3,fill="#84628e")+
theme_classic()+
scale_x_continuous(limits=c(0,50))+
geom_vline(xintercept = median(kiva_loans$giving_time_num,
na.rm=TRUE),
color="#84628e",
linetype="dashed")+
annotate("label",
label=paste("Median =",
round(median(kiva_loans$giving_time_num,
na.rm=TRUE),digits = 2)),
x=median(kiva_loans$giving_time_num,
na.rm=TRUE),
y=0.1,
color="#84628e")+
labs(title = "Distribution of time to fully fund a Kiva loan",
x = "Days",
y = "Density")
# Chunk 38: total-time
ggplot(kiva_loans,
aes(x=total_time_num))+
geom_density(color="#84628e",alpha=0.3,fill="#84628e")+
theme_classic()+
scale_x_continuous(limits=c(0,50))+
geom_vline(xintercept = median(kiva_loans$total_time_num,
na.rm=TRUE),
color="#84628e",
linetype="dashed")+
annotate("label",
label=paste("Median =",
round(median(kiva_loans$total_time_num,
na.rm=TRUE),digits = 2)),
x=median(kiva_loans$total_time_num,
na.rm=TRUE),
y=0.1,
color="#84628e")+
labs(title = "Distribution of time between posting and disbursing a Kiva loan",
x = "Days",
y = "Density")
# Chunk 1: setup
x <-
c("tidyverse",
"knitr",
"formatR",
"stringr",
"quantmode",
"skimr",
"lubridate",
"tidyr",
"formattable",
"grid",
"gridExtra",
"kableExtra",
"here")
lapply(x, require, character.only = TRUE)
opts_chunk$set(echo = FALSE,
warning = FALSE,
error = FALSE,
message = FALSE,
collapse= TRUE,
comment = NA,
tidy = TRUE)
# Chunk 4: read-data
kiva_loans <- readRDS(here::here("static","data","datakiva_loans.rds"))
# Chunk 5
#Get a glimpse of kiva_loans
glimpse(kiva_loans)
# Chunk 6
#Select variables
kiva_loans %>%
dplyr::select (id,
loan_amount,
sector,
country_code,
currency,
posted_time,
disbursed_time,
term_in_months,
lender_count,
borrower_genders,
repayment_interval,
funded_time) -> kiva_loans
#Convert country_code, sector, currency, borrower_genders, and repayment_interval to factors.
categorical <- c("sector",
"country_code",
"currency",
"borrower_genders",
"repayment_interval")
kiva_loans[categorical] <- lapply(kiva_loans[categorical],
factor)
# Chunk 7
#Turn kiva_loans back into an atomic vector of characters
kiva_loans$borrower_genders <- as.character(kiva_loans$borrower_genders)
#Split each row into multiple strings
genders <- str_split(kiva_loans$borrower_genders, ", ")
#Assign 1 for female and 0 for male
females_count <- lapply(genders, str_count, pattern="female")
#Count how many females are in each list element
females_sum <- lapply(females_count, sum)
#Create a function that takes the two lists just made
compare_genders <- function(females_count, females_sum){
#Set "single_female" when female sum and length is 1
ifelse (females_sum==1&&length(females_count)==1, "single_female",
#Set "mult_females" when female sum and length females_count is the same and different to zero
ifelse(females_sum==length(females_count)&&females_sum!=0,"mult_females",
#Set "single_male" #Set "mult_males" when female sum is zero and the count of individuals is 1
ifelse(females_sum==0&&length(females_count)==1,"single_male",
#Set "mult_males" when female sum is zero and the count of individuals is greater than 1
ifelse(females_sum==0&&length(females_count)>1,"mult_males",
#Set "mixed_genders" when the sum of females is different to the count of individual
ifelse(females_sum!=length(females_count),"mixed_genders","strange")))))
}
#Apply function compare_genders
kiva_loans$borrower_genders <- mapply(compare_genders,females_count,females_sum)
# Chunk 8
#Make kiva_loans$borrower_genders a factor again
kiva_loans$borrower_genders <- as.factor(kiva_loans$borrower_genders)
#Check levels
levels(kiva_loans$borrower_genders)
# Chunk 10
## It seems like two currencies are returning an error. Let's filter them out.
#Turning kiva_loans back into a character vector
kiva_loans$currency <- as.character(kiva_loans$currency)
kiva_loans%>%
#Filter out "SSP"
dplyr::filter(currency!="SSP")%>%
#Filter out "ZWD"
filter(currency!="ZWD")->kiva_loans
#Turn kiva_loans$currency back into a factor
kiva_loans$currency <- as.factor(kiva_loans$currency)
#Store all levels as vector `from`
from <- as.vector(levels(kiva_loans$currency))
#Create a vector `to` with requested currency "USD"
to <- rep(length(levels(kiva_loans$currency)),x="USD")
#Create a dataframe `currencies` with conversion rates `Last`
currencies <- quantmod::getQuote(paste0(from, to, "=X"))
# Chunk 11
#Set row names as columns in the currencies dataframe
currencies <- rownames_to_column(currencies)
#Split currencies$rownames by extracting the first 3 characters
currencies$currency <-  substring(currencies$rowname, 1,3)
#currencies <- readRDS(file="/Users/AngelaDelgado/Desktop/currencies.rds")
kiva_loans%>%
#Join currencies to kiva_loans by="currency"
left_join(currencies, by="currency") -> kiva_loans
kiva_loans%>%
#Convert the loan from its original currency to USD
mutate(loan_usd=loan_amount*Last)-> kiva_loans
# Chunk 12
#Read `country_region.csv`
regions <- read_csv(here::here("static","data","iso_countries.csv"))
# Chunk 13
kiva_loans%>%
#Join currencies to kiva_loans by="country_code"
left_join(regions, by=c("country_code"="iso")) -> kiva_loans
# Chunk 14
kiva_loans$region <- as.factor(kiva_loans$region)
levels(kiva_loans$region)
# Chunk 15: total_time_creation
kiva_loans%>%
mutate(total_time_num=as.numeric(difftime(posted_time,
disbursed_time,
units = "days")),
giving_time_num=as.numeric(difftime(funded_time,
posted_time,
units = "days"))) ->kiva_loans
# Chunk 16
#Select variables
kiva_loans %>%
dplyr::select (id,
loan_usd,
sector,
region,
term_in_months,
lender_count,
borrower_genders,
repayment_interval,
total_time_num,
giving_time_num,
country_code,
posted_time,
funded_time,
disbursed_time)%>%
arrange(posted_time)-> kiva_loans
kiva_loans$country_code <- as.factor(kiva_loans$country_code)
kiva_loans$id <- as.character(kiva_loans$id)
#Skim the dataset
skim(kiva_loans)
# Chunk 17
kiva_loans <-  kiva_loans%>%
filter(region!="EU",
repayment_interval!="weekly",
sector!="Construction"&
sector!="Entertainment"&
sector!= "Manufacturing"&
sector!= "Wholesale")%>%
droplevels()
summary(kiva_loans)
kiva_loans <-  kiva_loans%>%
filter(region!="EU",
repayment_interval!="weekly",
sector!="Construction"&
sector!="Entertainment"&
sector!= "Manufacturing"&
sector!= "Wholesale")%>%
droplevels()%>%
na.omit()
summary(kiva_loans)
AF_repayment_interval <- kiva_loans %>%
filter(region=="AF")%>%
dplyr::count(repayment_interval)%>%
mutate(repayment_interval=reorder(repayment_interval, n))%>%
ggplot(aes(
x = repayment_interval,
y = n,
fill = repayment_interval,
color = repayment_interval)) +
geom_col(show.legend = FALSE, alpha=0.7) +
theme_minimal() +
labs(title = "Africa",
x = "",
y = "Number of loans") +
theme(axis.text.x = element_text(angle = 45, hjust=1),
axis.ticks.x = element_blank()) +
#guides(fill = guide_legend(title = "Repayment interval")) +
scale_fill_viridis_d()+
scale_color_viridis_d()+
coord_flip(ylim = c(0,170000))
AF_repayment_interval
AF_repayment_interval <- kiva_loans %>%
filter(region=="Africa")%>%
dplyr::count(repayment_interval)%>%
mutate(repayment_interval=reorder(repayment_interval, n))%>%
ggplot(aes(
x = repayment_interval,
y = n,
fill = repayment_interval,
color = repayment_interval)) +
geom_col(show.legend = FALSE, alpha=0.7) +
theme_minimal() +
labs(title = "Africa",
x = "",
y = "Number of loans") +
theme(axis.text.x = element_text(angle = 45, hjust=1),
axis.ticks.x = element_blank()) +
#guides(fill = guide_legend(title = "Repayment interval")) +
scale_fill_viridis_d()+
scale_color_viridis_d()+
coord_flip(ylim = c(0,170000))
AF_repayment_interval
blogdown::serve_site()
prop.table(table(kiva_loans$sector))%>%
as.tibble()%>%
mutate(n=n*100)%>%
arrange(desc(n))%>%
kable(caption="Generally, the most frequent use of loans is agriculture, followed by food and retail.",
col.names = c("Sector","Percentage")) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
library(kableExtra)
prop.table(table(kiva_loans$sector))%>%
as.tibble()%>%
mutate(n=n*100)%>%
arrange(desc(n))%>%
kable(caption="Generally, the most frequent use of loans is agriculture, followed by food and retail.",
col.names = c("Sector","Percentage")) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
rlang::last_error()
prop.table(table(kiva_loans$sector))
prop.table(table(kiva_loans$sector))%>%kable()
prop.table(table(kiva_loans$sector))%>%
rownames_to_column()
prop.table(table(kiva_loans$sector))%>%
data.frame()
prop.table(table(kiva_loans$sector))%>%
data.frame()%>%
mutate(Freq=Freq*100)%>%
arrange(desc(Freq))
prop.table(table(kiva_loans$region))%>%
data.frame()%>%
mutate(Freq=Freq*100)%>%
arrange(desc(Freq))%>%
kable(format="html",
caption="Half of all Kiva loans are requested in Asia followed by Africa, South America, Oceania and finally the European Union.",
col.names = c("regions","Percentage")) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
prop.table(table(kiva_loans$region))%>%
data.frame()%>%
mutate(Freq=Freq*100)%>%
arrange(desc(Freq))%>%
kable(format="html",
caption="Half of all Kiva loans are requested in Asia followed by Africa, South America, Oceania and finally the European Union.",
col.names = c("Regions","Percentage")) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
prop.table(table(kiva_loans$repayment_interval))%>%
data.frame()%>%
mutate(Freq=Freq*100)%>%
arrange(desc(Freq))%>%
kable(caption="The most popular type of repayment interval is monthly.",
col.names = c("Repayment interval","Percentage")) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
options("digits"=2)
prop.table(table(kiva_loans$borrower_genders))%>%
data.frame()%>%
mutate(Freq=Freq*100)%>%
arrange(desc(Freq))%>%
kable(caption="A single female is the most common type of borrower gender with over half of all Kiva loans requested.",
col.names = c("Gender","Percentage")) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
blogdown::serve_site()
# Chunk 1: setup
x <-
c("dplyr",
"knitr",
"here",
"scales",
"magrittr",
"ggplot2",
"cowplot",
"tidyverse",
"Metrics",
"rsample",
"broom",
"sf",
"rgdal",
"summarytools",
"leaflet",
"tmap",
"tmaptools",
"lubridate")
lapply(x, require, character.only = TRUE)
opts_chunk$set(echo = FALSE,
warning = FALSE,
error = FALSE,
message = FALSE,
collapse = TRUE,
comment = NA,
tidy = TRUE,
include = FALSE)
theme_set(theme_light())
options(
digits=3,
scipen = 999
)
knit_hooks$set(inline = function(x) {
prettyNum(round(x,2), big.mark=",")
})
scale_colour_discrete <- function(...) scale_colour_brewer(..., palette="Paired")
scale_fill_discrete <- function(...) scale_fill_brewer(... , palette="Paired")
r_downloads <- readRDS(file=here::here("static","data","r-downloads.rds"))
r_downloads <- na.omit(r_downloads)%>%
filter(date<"2018-10-20")
# Chunk 2: read-country-codes-and-pop-and-map
iso_codes <- read_csv(here::here("static","data","iso_countries.csv"))
pop <-read_csv(here::here("static","data","country_populations.csv"))
map_path <- here::here("static","data","world_shapefile","world_shapefile.shp")
world <- sf::st_read(map_path)
# Chunk 3: merge-country-codes
r_downloads%<>%
full_join(iso_codes, by=c("country"="iso"))%>%
filter(!is.na(sub_region))
# Chunk 4: downloads-by-country
r_downloads%>%
group_by(name)%>%
summarise(n=n())%>%
filter(!is.na(n))%>%
arrange(desc(n))->downloads_per_country
# Chunk 5: plot-top-10-countries
downloads_per_country%>%
arrange(desc(n))%>%
head(10)%>%
mutate(name=fct_reorder(name,n))%>%
ggplot(aes(name,n,fill=name))+
geom_col()+
expand_limits(y=0)+
coord_flip()+
scale_y_continuous(labels=comma_format())+
labs(title="Top 10 countries by R downloads in 2017/18",
x="",
y="Downloads")+
theme(legend.position = "none")
# Chunk 6: create-tibble-with-pop-and-users-only
full_maps <- downloads_per_country%>%
full_join(iso_codes, by=c("name"="name"))%>%
filter(!is.na(sub_region))%>%
left_join(pop, by=c("name"="name"))%>%
select(n, name, iso_3, region, sub_region, pop_2018)%>%
mutate(n_capita=n/pop_2018)%>%
filter(!is.na(n_capita),
pop_2018!=0)
# Chunk 7: merge-full-maps-and-map-path
world_full <- world%>%
left_join(full_maps, by=c("ISO3"="iso_3"))
# Chunk 8: create-total-downloads-map
n_map <- tm_shape(world_full) +
tm_borders(col="black", lwd=0.1)+
tm_fill(col="n",n=4, style="jenks", palette = get_brewer_pal("BuPu", n = 4, contrast = c(0.13, 0.9))) +
tm_layout(main.title = "Total R downloads in 2017/18",
main.title.size = 2, frame = TRUE, bg.color = "aliceblue", title.position = c("right","bottom"))+
tm_legend(position=c("left", "bottom"), bg.color="white", frame=TRUE, legend.title.size=1)
# Chunk 9: plot-total-downloads-map
n_map
downloads_per_country%>%
arrange(desc(n))%>%
head(10)%>%
mutate(name=fct_reorder(name,n))%>%
ggplot(aes(name,n,fill=name))+
geom_col()+
expand_limits(y=0)+
coord_flip()+
scale_y_continuous(labels=comma_format())+
labs(title="Top 10 countries by R downloads in 2017/18",
x="",
y="Downloads")+
theme(legend.position = "none")
n_map
blogdown::serve_site()
str(full_maps)
full_maps%>%
arrange(desc(n_capita))%>%
head(10)%>%
mutate(name=fct_reorder(name,n_capita))%>%
ggplot(aes(name,n_capita,fill=name))+
geom_col()+
expand_limits(y=0)+
coord_flip()+
scale_y_continuous(labels=comma_format())+
labs(title="Top 10 countries by R downloads in 2017/18",
x="",
y="Downloads")+
theme(legend.position = "none")
full_maps%>%
arrange(desc(n_capita))%>%
head(10)%>%
mutate(name=fct_reorder(name,n_capita))%>%
ggplot(aes(name,n_capita,fill=name))+
geom_col()+
expand_limits(y=0)+
coord_flip()+
scale_y_continuous(labels=comma_format())+
labs(title="Top 10 countries by R downloads per capita in 2017/18",
x="",
y="Downloads")+
theme(legend.position = "none")
n_capita_map <- tm_shape(world_full) +
tm_borders(col="black", lwd=0.1)+
tm_fill(col="n_capita",n=4, style="jenks", palette = get_brewer_pal("YlOr", n = 4, contrast = c(0.13, 0.9))) +
tm_layout(main.title = "Total R downloads in 2017/18",
main.title.size = 2, frame = TRUE, bg.color = "aliceblue", title.position = c("right","bottom"))+
tm_legend(position=c("left", "bottom"), bg.color="white", frame=TRUE, legend.title.size=1)
n_capita_map <- tm_shape(world_full) +
tm_borders(col="black", lwd=0.1)+
tm_fill(col="n_capita",n=4, style="jenks", palette = get_brewer_pal("YlRd", n = 4, contrast = c(0.13, 0.9))) +
tm_layout(main.title = "Total R downloads in 2017/18",
main.title.size = 2, frame = TRUE, bg.color = "aliceblue", title.position = c("right","bottom"))+
tm_legend(position=c("left", "bottom"), bg.color="white", frame=TRUE, legend.title.size=1)
n_capita_map <- tm_shape(world_full) +
tm_borders(col="black", lwd=0.1)+
tm_fill(col="n_capita",n=4, style="jenks", palette = get_brewer_pal("YlRd", n = 4, contrast = c(0.13, 0.9))) +
tm_layout(main.title = "Total R downloads in 2017/18",
main.title.size = 2, frame = TRUE, bg.color = "aliceblue", title.position = c("right","bottom"))+
tm_legend(position=c("left", "bottom"), bg.color="white", frame=TRUE, legend.title.size=1)
n_capita_map <- tm_shape(world_full) +
tm_borders(col="black", lwd=0.1)+
tm_fill(col="n_capita",n=4, style="jenks", palette = get_brewer_pal("YlRd", n = 4, contrast = c(0.13, 0.9))) +
tm_layout(main.title = "Total R downloads in 2017/18",
main.title.size = 2, frame = TRUE, bg.color = "aliceblue", title.position = c("right","bottom"))+
tm_legend(position=c("left", "bottom"), bg.color="white", frame=TRUE, legend.title.size=1)
n_capita_map <- tm_shape(world_full) +
tm_borders(col="black", lwd=0.1)+
tm_fill(col="n_capita",n=4, style="jenks", palette = get_brewer_pal("OrRd", n = 4, contrast = c(0.13, 0.9))) +
tm_layout(main.title = "Total R downloads in 2017/18",
main.title.size = 2, frame = TRUE, bg.color = "aliceblue", title.position = c("right","bottom"))+
tm_legend(position=c("left", "bottom"), bg.color="white", frame=TRUE, legend.title.size=1)
n_capita_map
r_downloads%>%
#Group by the month of the year
group_by(month(date), sub_region)%>%
#Count downloads by the month of the year
summarise(monthly_downloads=n())%>%
#Pipe to make a plot
ggplot(aes(x=`month(date)`,y= monthly_downloads))+
#Add line
geom_line(alpha=0.5, color="purple")+
geom_point(color="purple")+
scale_x_continuous(breaks=c(seq(1,12,1)))+
#Add nice commas y axis
scale_y_continuous(labels=comma_format())+
#Add title
labs(title="Monthly R downloads around the world",
y="Downloads",
x="Week")+
facet_wrap(~sub_region, scales="free")
